<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.2.7-b01  svn-revision#${svn.Last.Changed.Rev}. -->
<definitions targetNamespace="http://webservice.arcflash.ca.com" name="RPSService4CPMImpl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:tns="http://webservice.arcflash.ca.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsp1_2="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
  <types>
    <xs:schema version="1.0" targetNamespace="http://webservice.arcflash.arcserve.ca.com/d2dstatus/" xmlns:ns1="http://webservice.arcflash.ca.com" xmlns:tns="http://webservice.arcflash.arcserve.ca.com/d2dstatus/" xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:import namespace="http://webservice.arcflash.ca.com"/>

      <xs:complexType name="D2DStatusInfo">
        <xs:sequence>
          <xs:element name="autoOfflieCopy" type="xs:int"/>
          <xs:element name="backupConfiged" type="xs:boolean"/>
          <xs:element name="currentRunningSnapshot" type="xs:string" minOccurs="0"/>
          <xs:element name="destinationAccessible" type="xs:boolean"/>
          <xs:element name="destinationEstimatedBackupCount" type="xs:int"/>
          <xs:element name="destinationFreeSpace" type="xs:long"/>
          <xs:element name="destinationPath" type="xs:string" minOccurs="0"/>
          <xs:element name="destinationStatus" type="tns:D2DStatus" minOccurs="0"/>
          <xs:element name="destinationVCMStorages" type="tns:VCMStorage" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="driverInstalled" type="xs:boolean"/>
          <xs:element name="estimatedValue" type="tns:D2DEstimatedValue" minOccurs="0"/>
          <xs:element name="heartbeatStatus" type="xs:int"/>
          <xs:element name="isUseBackupSets" type="xs:boolean"/>
          <xs:element name="lastBackupJobStatus" type="tns:D2DJobStatus" minOccurs="0"/>
          <xs:element name="lastBackupStartTime" type="xs:dateTime" minOccurs="0"/>
          <xs:element name="lastBackupStatus" type="tns:D2DStatus" minOccurs="0"/>
          <xs:element name="lastBackupType" type="tns:D2DBackupType" minOccurs="0"/>
          <xs:element name="monitorUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="mostRecentRepDuration" type="xs:long"/>
          <xs:element name="overallStatus" type="tns:D2DStatus" minOccurs="0"/>
          <xs:element name="recoveryPointCount" type="xs:int"/>
          <xs:element name="recoveryPointMounted" type="xs:string" minOccurs="0"/>
          <xs:element name="recoveryPointRetentionCount" type="xs:int"/>
          <xs:element name="recoveryPointStatus" type="tns:D2DStatus" minOccurs="0"/>
          <xs:element name="restarted" type="xs:boolean"/>
          <xs:element name="snapshots" type="ns1:vmSnapshotsInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="uuid" type="xs:string" minOccurs="0"/>
          <xs:element name="vmName" type="xs:string" minOccurs="0"/>
          <xs:element name="vmStatus" type="ns1:vmPowerStatus" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="VCMStorage">
        <xs:sequence>
          <xs:element name="coldStandSize" type="xs:long"/>
          <xs:element name="freeSize" type="xs:long"/>
          <xs:element name="name" type="xs:string" minOccurs="0"/>
          <xs:element name="otherSize" type="xs:long"/>
          <xs:element name="totalSize" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:simpleType name="D2DStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Unknown"/>
          <xs:enumeration value="OK"/>
          <xs:enumeration value="Warning"/>
          <xs:enumeration value="Error"/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name="D2DEstimatedValue">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Unknown"/>
          <xs:enumeration value="FLASE"/>
          <xs:enumeration value="TRUE"/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name="D2DJobStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Unknown"/>
          <xs:enumeration value="Finished"/>
          <xs:enumeration value="Failed"/>
          <xs:enumeration value="Active"/>
          <xs:enumeration value="Canceled"/>
          <xs:enumeration value="Crashed"/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name="D2DBackupType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Unknown"/>
          <xs:enumeration value="FullBackup"/>
          <xs:enumeration value="IncrementalBackup"/>
          <xs:enumeration value="ResyncBackup"/>
        </xs:restriction>
      </xs:simpleType>
</xs:schema>
    <xs:schema elementFormDefault="qualified" version="1.0" targetNamespace="http://backup.data.webservice.arcflash.ca.com/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="emailAlertBaseSettings">
        <xs:sequence>
          <xs:element name="enableProxy" type="xs:boolean"/>
          <xs:element name="enableHTMLFormat" type="xs:boolean"/>
          <xs:element name="proxyAddress" type="xs:string" minOccurs="0"/>
          <xs:element name="proxyPort" type="xs:int"/>
          <xs:element name="proxyUsername" type="xs:string" minOccurs="0"/>
          <xs:element name="proxyPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="subject" type="xs:string" minOccurs="0"/>
          <xs:element name="content" type="xs:string" minOccurs="0"/>
          <xs:element name="fromAddress" type="xs:string" minOccurs="0"/>
          <xs:element name="recipients" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="smtp" type="xs:string" minOccurs="0"/>
          <xs:element name="mailServiceName" type="xs:int"/>
          <xs:element name="mailPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="url" type="xs:string" minOccurs="0"/>
          <xs:element name="smtpPort" type="xs:int"/>
          <xs:element name="enableSsl" type="xs:boolean"/>
          <xs:element name="enableTls" type="xs:boolean"/>
          <xs:element name="mailUser" type="xs:string" minOccurs="0"/>
          <xs:element name="mailAuth" type="xs:boolean"/>
          <xs:element name="proxyAuth" type="xs:boolean"/>
          <xs:element name="enableSettings" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="backupVolumes">
        <xs:sequence>
          <xs:element name="fullMachine" type="xs:boolean"/>
          <xs:element name="volumes" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="backupSchedule">
        <xs:sequence>
          <xs:element name="enabled" type="xs:boolean"/>
          <xs:element name="interval" type="xs:int"/>
          <xs:element name="intervalUnit" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
</xs:schema>
    <xs:schema version="1.0" targetNamespace="http://webservice.arcflash.ca.com" xmlns:ns2="http://data.webservice.arcflash.ca.com/xsd" xmlns:ns4="http://activitylog.data.webservice.arcflash.ca.com/xsd" xmlns:ns3="http://backup.data.webservice.arcflash.ca.com/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns5="http://restore.data.webservice.arcflash.ca.com/xsd" xmlns:ns6="http://history.job.data.webservice.arcflash.ca.com/xsd" xmlns:ns7="http://browse.data.webservice.arcflash.ca.com/xsd">

      <xs:import namespace="http://data.webservice.arcflash.ca.com/xsd"/>

      <xs:import namespace="http://backup.data.webservice.arcflash.ca.com/xsd"/>

      <xs:import namespace="http://activitylog.data.webservice.arcflash.ca.com/xsd"/>

      <xs:import namespace="http://restore.data.webservice.arcflash.ca.com/xsd"/>

      <xs:import namespace="http://history.job.data.webservice.arcflash.ca.com/xsd"/>

      <xs:import namespace="http://browse.data.webservice.arcflash.ca.com/xsd"/>

      <xs:element name="ArchiveDelConfiguration" type="tns:archiveConfiguration"/>

      <xs:element name="BackupD2D" type="tns:BackupD2D"/>

      <xs:element name="DataStoreGetDedupeRequiredMinMemSizeByte" type="tns:DataStoreGetDedupeRequiredMinMemSizeByte"/>

      <xs:element name="DataStoreGetDedupeRequiredMinMemSizeByteResponse" type="tns:DataStoreGetDedupeRequiredMinMemSizeByteResponse"/>

      <xs:element name="DataStoreInfo" type="tns:DataStoreInfo"/>

      <xs:element name="DataStoreSettingInfo" type="tns:dataStoreSettingInfo"/>

      <xs:element name="DataStoreUpdateDSPathStatus" type="tns:DataStoreUpdateDSPathStatus"/>

      <xs:element name="DataStoreUpdateDSPathStatusResponse" type="tns:DataStoreUpdateDSPathStatusResponse"/>

      <xs:element name="HashRoleEnvInfo">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="PhysMemory" type="xs:unsignedLong"/>
            <xs:element name="SSDList">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="SSD" maxOccurs="unbounded">
                    <xs:complexType>
                      <xs:simpleContent>
                        <xs:extension base="xs:integer">
                          <xs:attribute name="label" type="xs:string" use="required"/>
                          <xs:attribute name="iops" type="xs:unsignedShort" use="required"/>
                        </xs:extension>
                      </xs:simpleContent>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="RPSCancelJob" type="tns:RPSCancelJob"/>

      <xs:element name="RPSCancelJobResponse" type="tns:RPSCancelJobResponse"/>

      <xs:element name="RPSJob" type="tns:rpsJobInfo"/>

      <xs:element name="RPSRegInfo" type="tns:RPSRegInfo"/>

      <xs:element name="RPSResumeJob" type="tns:RPSResumeJob"/>

      <xs:element name="RPSResumeJobResponse" type="tns:RPSResumeJobResponse"/>

      <xs:element name="Register4RPSApp" type="tns:Register4RPSApp"/>

      <xs:element name="Register4RPSAppResponse" type="tns:Register4RPSAppResponse"/>

      <xs:element name="RegisterAndAssignD2DListToRPS" type="tns:RegisterAndAssignD2DListToRPS"/>

      <xs:element name="RegisterAndAssignD2DListToRPSResponse" type="tns:RegisterAndAssignD2DListToRPSResponse"/>

      <xs:element name="UnRegister4RPSApp" type="tns:UnRegister4RPSApp"/>

      <xs:element name="UnRegister4RPSAppResponse" type="tns:UnRegister4RPSAppResponse"/>

      <xs:element name="addDataStoreInstance" type="tns:addDataStoreInstance"/>

      <xs:element name="addDataStoreInstanceResponse" type="tns:addDataStoreInstanceResponse"/>

      <xs:element name="cancelJob" type="tns:cancelJob"/>

      <xs:element name="cancelJobResponse" type="tns:cancelJobResponse"/>

      <xs:element name="checkIsSeedingRunning" type="tns:checkIsSeedingRunning"/>

      <xs:element name="checkIsSeedingRunningResponse" type="tns:checkIsSeedingRunningResponse"/>

      <xs:element name="createFolder" type="tns:createFolder"/>

      <xs:element name="createFolderResponse" type="tns:createFolderResponse"/>

      <xs:element name="createFolderWithDetails" type="tns:createFolderWithDetails"/>

      <xs:element name="createFolderWithDetailsResponse" type="tns:createFolderWithDetailsResponse"/>

      <xs:element name="cutAllRemoteConnections" type="tns:cutAllRemoteConnections"/>

      <xs:element name="cutAllRemoteConnectionsResponse" type="tns:cutAllRemoteConnectionsResponse"/>

      <xs:element name="dataStoreCommonStatus" type="tns:dataStoreCommonStatus"/>

      <xs:element name="dedupInstanceStatus" type="tns:dedupInstanceStatus"/>

      <xs:element name="deleteNodesFromDataStore" type="tns:deleteNodesFromDataStore"/>

      <xs:element name="deleteNodesFromDataStoreResponse" type="tns:deleteNodesFromDataStoreResponse"/>

      <xs:element name="deleteRPSPolicies" type="tns:deleteRPSPolicies"/>

      <xs:element name="deleteRPSPoliciesResponse" type="tns:deleteRPSPoliciesResponse"/>

      <xs:element name="establishTrust" type="tns:establishTrust"/>

      <xs:element name="establishTrustResponse" type="tns:establishTrustResponse"/>

      <xs:element name="getActivityLogs" type="tns:getActivityLogs"/>

      <xs:element name="getActivityLogsResponse" type="tns:getActivityLogsResponse"/>

      <xs:element name="getAllPauseMergeJobMonitors" type="tns:getAllPauseMergeJobMonitors"/>

      <xs:element name="getAllPauseMergeJobMonitorsResponse" type="tns:getAllPauseMergeJobMonitorsResponse"/>

      <xs:element name="getClientRunningJobs" type="tns:getClientRunningJobs"/>

      <xs:element name="getClientRunningJobsResponse" type="tns:getClientRunningJobsResponse"/>

      <xs:element name="getClientWaitingJobs" type="tns:getClientWaitingJobs"/>

      <xs:element name="getClientWaitingJobsResponse" type="tns:getClientWaitingJobsResponse"/>

      <xs:element name="getDataSizesFromStorage" type="tns:getDataSizesFromStorage"/>

      <xs:element name="getDataSizesFromStorageResponse" type="tns:getDataSizesFromStorageResponse"/>

      <xs:element name="getDataStoreFreeMemory" type="tns:getDataStoreFreeMemory"/>

      <xs:element name="getDataStoreFreeMemoryResponse" type="tns:getDataStoreFreeMemoryResponse"/>

      <xs:element name="getDataStoreHealthStatus" type="tns:getDataStoreHealthStatus"/>

      <xs:element name="getDataStoreHealthStatusResponse" type="tns:getDataStoreHealthStatusResponse"/>

      <xs:element name="getDataStoreInfo4Lightintegration" type="tns:getDataStoreInfo4Lightintegration"/>

      <xs:element name="getDataStoreInfo4LightintegrationResponse" type="tns:getDataStoreInfo4LightintegrationResponse"/>

      <xs:element name="getDataStoreInfoFromDisk" type="tns:getDataStoreInfoFromDisk"/>

      <xs:element name="getDataStoreInfoFromDiskResponse" type="tns:getDataStoreInfoFromDiskResponse"/>

      <xs:element name="getDataStoreInstance" type="tns:getDataStoreInstance"/>

      <xs:element name="getDataStoreInstanceResponse" type="tns:getDataStoreInstanceResponse"/>

      <xs:element name="getDataStoreSettingFromExistingPath" type="tns:getDataStoreSettingFromExistingPath"/>

      <xs:element name="getDataStoreSettingFromExistingPathResponse" type="tns:getDataStoreSettingFromExistingPathResponse"/>

      <xs:element name="getDataStoreStatus" type="tns:getDataStoreStatus"/>

      <xs:element name="getDataStoreStatusResponse" type="tns:getDataStoreStatusResponse"/>

      <xs:element name="getDefaultJobHistoryFilter" type="tns:getDefaultJobHistoryFilter"/>

      <xs:element name="getDefaultJobHistoryFilterResponse" type="tns:getDefaultJobHistoryFilterResponse"/>

      <xs:element name="getEdgeRpsRegInfo" type="tns:getEdgeRpsRegInfo"/>

      <xs:element name="getEdgeRpsRegInfoResponse" type="tns:getEdgeRpsRegInfoResponse"/>

      <xs:element name="getFileFolderWithCredentials" type="tns:getFileFolderWithCredentials"/>

      <xs:element name="getFileFolderWithCredentialsResponse" type="tns:getFileFolderWithCredentialsResponse"/>

      <xs:element name="getHashRoleEnvInfo" type="tns:getHashRoleEnvInfo"/>

      <xs:element name="getHashRoleEnvInfoResponse" type="tns:getHashRoleEnvInfoResponse"/>

      <xs:element name="getJobActivityLogs" type="tns:getJobActivityLogs"/>

      <xs:element name="getJobActivityLogsResponse" type="tns:getJobActivityLogsResponse"/>

      <xs:element name="getJobHistory" type="tns:getJobHistory"/>

      <xs:element name="getJobHistoryResponse" type="tns:getJobHistoryResponse"/>

      <xs:element name="getJobMonitorLog" type="tns:getJobMonitorLog"/>

      <xs:element name="getJobMonitorLogResponse" type="tns:getJobMonitorLogResponse"/>

      <xs:element name="getJobMonitorMapByPolicyId" type="tns:getJobMonitorMapByPolicyId"/>

      <xs:element name="getJobMonitorMapByPolicyIdResponse" type="tns:getJobMonitorMapByPolicyIdResponse"/>

      <xs:element name="getJobMonitorsByD2DUuidAndType" type="tns:getJobMonitorsByD2DUuidAndType"/>

      <xs:element name="getJobMonitorsByD2DUuidAndTypeResponse" type="tns:getJobMonitorsByD2DUuidAndTypeResponse"/>

      <xs:element name="getJobMonitorsByType" type="tns:getJobMonitorsByType"/>

      <xs:element name="getJobMonitorsByTypeResponse" type="tns:getJobMonitorsByTypeResponse"/>

      <xs:element name="getMappedNetworkPath" type="tns:getMappedNetworkPath"/>

      <xs:element name="getMappedNetworkPathResponse" type="tns:getMappedNetworkPathResponse"/>

      <xs:element name="getMostRecentRecoveryPoints" type="tns:getMostRecentRecoveryPoints"/>

      <xs:element name="getMostRecentRecoveryPointsResponse" type="tns:getMostRecentRecoveryPointsResponse"/>

      <xs:element name="getRPSJobs" type="tns:getRPSJobs"/>

      <xs:element name="getRPSJobsResponse" type="tns:getRPSJobsResponse"/>

      <xs:element name="getRPSPolicySummaries" type="tns:getRPSPolicySummaries"/>

      <xs:element name="getRPSPolicySummariesResponse" type="tns:getRPSPolicySummariesResponse"/>

      <xs:element name="getRPSRunningJobs" type="tns:getRPSRunningJobs"/>

      <xs:element name="getRPSRunningJobsByType" type="tns:getRPSRunningJobsByType"/>

      <xs:element name="getRPSRunningJobsByTypeResponse" type="tns:getRPSRunningJobsByTypeResponse"/>

      <xs:element name="getRPSRunningJobsResponse" type="tns:getRPSRunningJobsResponse"/>

      <xs:element name="getRPSServerID" type="tns:getRPSServerID"/>

      <xs:element name="getRPSServerIDResponse" type="tns:getRPSServerIDResponse"/>

      <xs:element name="getRPSSummary" type="tns:getRPSSummary"/>

      <xs:element name="getRPSSummaryResponse" type="tns:getRPSSummaryResponse"/>

      <xs:element name="getRPSWaitingJobs" type="tns:getRPSWaitingJobs"/>

      <xs:element name="getRPSWaitingJobsByType" type="tns:getRPSWaitingJobsByType"/>

      <xs:element name="getRPSWaitingJobsByTypeResponse" type="tns:getRPSWaitingJobsByTypeResponse"/>

      <xs:element name="getRPSWaitingJobsResponse" type="tns:getRPSWaitingJobsResponse"/>

      <xs:element name="getRecoveryPoints" type="tns:getRecoveryPoints"/>

      <xs:element name="getRecoveryPointsResponse" type="tns:getRecoveryPointsResponse"/>

      <xs:element name="getRecoveryPointsWithNodeInfo" type="tns:getRecoveryPointsWithNodeInfo"/>

      <xs:element name="getRecoveryPointsWithNodeInfoResponse" type="tns:getRecoveryPointsWithNodeInfoResponse"/>

      <xs:element name="getRegistedClientByDatastore" type="tns:getRegistedClientByDatastore"/>

      <xs:element name="getRegistedClientByDatastoreResponse" type="tns:getRegistedClientByDatastoreResponse"/>

      <xs:element name="getRegistedClientList" type="tns:getRegistedClientList"/>

      <xs:element name="getRegistedClientListResponse" type="tns:getRegistedClientListResponse"/>

      <xs:element name="getRpsNodes" type="tns:getRpsNodes"/>

      <xs:element name="getRpsNodesResponse" type="tns:getRpsNodesResponse"/>

      <xs:element name="getServerTime" type="tns:getServerTime"/>

      <xs:element name="getServerTimeResponse" type="tns:getServerTimeResponse"/>

      <xs:element name="getVersionInfo" type="tns:getVersionInfo"/>

      <xs:element name="getVersionInfoResponse" type="tns:getVersionInfoResponse"/>

      <xs:element name="getVolumeSize4DataStore" type="tns:getVolumeSize4DataStore"/>

      <xs:element name="getVolumeSize4DataStoreResponse" type="tns:getVolumeSize4DataStoreResponse"/>

      <xs:element name="getVolumes" type="tns:getVolumes"/>

      <xs:element name="getVolumesResponse" type="tns:getVolumesResponse"/>

      <xs:element name="getVolumesWithDetails" type="tns:getVolumesWithDetails"/>

      <xs:element name="getVolumesWithDetailsResponse" type="tns:getVolumesWithDetailsResponse"/>

      <xs:element name="importDataStoreInstance" type="tns:importDataStoreInstance"/>

      <xs:element name="importDataStoreInstanceResponse" type="tns:importDataStoreInstanceResponse"/>

      <xs:element name="isASBUAgentInstalled" type="tns:isASBUAgentInstalled"/>

      <xs:element name="isASBUAgentInstalledResponse" type="tns:isASBUAgentInstalledResponse"/>

      <xs:element name="isPathInDataStore" type="tns:isPathInDataStore"/>

      <xs:element name="isPathInDataStoreResponse" type="tns:isPathInDataStoreResponse"/>

      <xs:element name="login" type="tns:login"/>

      <xs:element name="loginResponse" type="tns:loginResponse"/>

      <xs:element name="modifyDataStoreInstance" type="tns:modifyDataStoreInstance"/>

      <xs:element name="modifyDataStoreInstanceResponse" type="tns:modifyDataStoreInstanceResponse"/>

      <xs:element name="pauseMerge" type="tns:pauseMerge"/>

      <xs:element name="pauseMergeResponse" type="tns:pauseMergeResponse"/>

      <xs:element name="queryCatalogStatus" type="tns:queryCatalogStatus"/>

      <xs:element name="queryCatalogStatusResponse" type="tns:queryCatalogStatusResponse"/>

      <xs:element name="register4Console" type="tns:register4Console"/>

      <xs:element name="register4ConsoleResponse" type="tns:register4ConsoleResponse"/>

      <xs:element name="registerD2DList" type="tns:registerD2DList"/>

      <xs:element name="registerD2DListResponse" type="tns:registerD2DListResponse"/>

      <xs:element name="removeDataStoreInstance" type="tns:removeDataStoreInstance"/>

      <xs:element name="removeDataStoreInstanceResponse" type="tns:removeDataStoreInstanceResponse"/>

      <xs:element name="resumeMerge" type="tns:resumeMerge"/>

      <xs:element name="resumeMergeResponse" type="tns:resumeMergeResponse"/>

      <xs:element name="rpsPolicy" type="tns:rpsPolicy"/>

      <xs:element name="saveRPSPolicy" type="tns:saveRPSPolicy"/>

      <xs:element name="saveRPSPolicyResponse" type="tns:saveRPSPolicyResponse"/>

      <xs:element name="startDataStoreInstance" type="tns:startDataStoreInstance"/>

      <xs:element name="startDataStoreInstanceResponse" type="tns:startDataStoreInstanceResponse"/>

      <xs:element name="startReplicationNow" type="tns:startReplicationNow"/>

      <xs:element name="startReplicationNowResponse" type="tns:startReplicationNowResponse"/>

      <xs:element name="stopDataStoreInstance" type="tns:stopDataStoreInstance"/>

      <xs:element name="stopDataStoreInstanceResponse" type="tns:stopDataStoreInstanceResponse"/>

      <xs:element name="submitFSOndemandCatalogJob" type="tns:submitFSOndemandCatalogJob"/>

      <xs:element name="submitFSOndemandCatalogJobResponse" type="tns:submitFSOndemandCatalogJobResponse"/>

      <xs:element name="submitSeedingJob" type="tns:submitSeedingJob"/>

      <xs:element name="submitSeedingJobResponse" type="tns:submitSeedingJobResponse"/>

      <xs:element name="unRegisterD2DList" type="tns:unRegisterD2DList"/>

      <xs:element name="unRegisterD2DListResponse" type="tns:unRegisterD2DListResponse"/>

      <xs:element name="updateAdminAccount" type="tns:updateAdminAccount"/>

      <xs:element name="updateAdminAccountResponse" type="tns:updateAdminAccountResponse"/>

      <xs:element name="validateDest" type="tns:validateDest"/>

      <xs:element name="validateDestResponse" type="tns:validateDestResponse"/>

      <xs:element name="validateSessPasswordByHash" type="tns:validateSessPasswordByHash"/>

      <xs:element name="validateSessPasswordByHashResponse" type="tns:validateSessPasswordByHashResponse"/>

      <xs:element name="validateStoreUpperLimit" type="tns:validateStoreUpperLimit"/>

      <xs:element name="validateStoreUpperLimitResponse" type="tns:validateStoreUpperLimitResponse"/>

      <xs:element name="validateUser" type="tns:validateUser"/>

      <xs:element name="validateUserByUUID" type="tns:validateUserByUUID"/>

      <xs:element name="validateUserByUUIDResponse" type="tns:validateUserByUUIDResponse"/>

      <xs:element name="validateUserResponse" type="tns:validateUserResponse"/>

      <xs:complexType name="getRPSPolicySummaries">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSPolicySummariesResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsPolicy" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="rpsPolicy">
        <xs:sequence>
          <xs:element name="rpsSettings" type="tns:rpsSettings" minOccurs="0"/>
          <xs:element name="advanceSchedule" type="ns2:advanceSchedule" minOccurs="0"/>
          <xs:element name="planUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="policyType" type="xs:int"/>
          <xs:element name="archiveTotape" type="tns:archiveConfig" minOccurs="0"/>
          <xs:element name="fileCopyConfiguration" type="tns:archiveConfiguration" minOccurs="0"/>
          <xs:element name="fileArchiveConfiguration" type="tns:archiveConfiguration" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string"/>
        <xs:attribute name="name" type="xs:string"/>
      </xs:complexType>

      <xs:complexType name="rpsSettings">
        <xs:sequence>
          <xs:element name="rpsBasicSettings" type="tns:rpsBasicSettings" minOccurs="0"/>
          <xs:element name="rpsReplicationSettings" type="tns:RPSReplicationSettings" minOccurs="0"/>
          <xs:element name="rpsDataStoreSettings" type="tns:RPSDataStoreSettings" minOccurs="0"/>
          <xs:element name="rpsRetentionSettings" type="tns:Retention" minOccurs="0"/>
          <xs:element name="rpsEmailAlertSettings" type="tns:RpsEmailAlertSettings" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="concurrentReplicationJobCount" type="xs:int" use="required"/>
      </xs:complexType>

      <xs:complexType name="rpsBasicSettings">
        <xs:sequence/>
        <xs:attribute name="storageUsageUpperLimit" type="xs:long" use="required"/>
        <xs:attribute name="enableCatalogGenerating" type="xs:boolean" use="required"/>
        <xs:attribute name="maxIncrementalSessions" type="xs:long" use="required"/>
        <xs:attribute name="maxIncrementalSessionsUnit" type="xs:int" use="required"/>
        <xs:attribute name="maxSyntheticalAndFullSessions" type="xs:long" use="required"/>
        <xs:attribute name="mergeStartType" type="xs:int" use="required"/>
        <xs:attribute name="mergeStartTime" type="xs:long" use="required"/>
        <xs:attribute name="mergeStartDayOfWeek" type="xs:int" use="required"/>
        <xs:attribute name="mergeStopType" type="xs:int" use="required"/>
        <xs:attribute name="mergeStopTime" type="xs:long" use="required"/>
        <xs:attribute name="mergeStopDayOfWeek" type="xs:int" use="required"/>
      </xs:complexType>

      <xs:complexType name="RPSReplicationSettings">
        <xs:sequence>
          <xs:element name="replicationPolicySettings" type="tns:ReplicationPolicySettings" minOccurs="0"/>
          <xs:element name="rpsBandWidthThrottlingSettings" type="tns:RPSBandWidthThrottlingSettings" minOccurs="0"/>
          <xs:element name="mspReplicationSettings" type="tns:mspReplicationSettings" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="enableReplication" type="xs:boolean" use="required"/>
        <xs:attribute name="hostId" type="xs:int" use="required"/>
        <xs:attribute name="hostName" type="xs:string"/>
        <xs:attribute name="port" type="xs:int" use="required"/>
        <xs:attribute name="userName" type="xs:string"/>
        <xs:attribute name="password" type="xs:string"/>
        <xs:attribute name="uuid" type="xs:string"/>
        <xs:attribute name="protocol" type="xs:int" use="required"/>
        <xs:attribute name="compress" type="xs:boolean" use="required"/>
        <xs:attribute name="encryption" type="xs:boolean" use="required"/>
        <xs:attribute name="transportMode" type="xs:int" use="required"/>
        <xs:attribute name="transportPort" type="xs:int" use="required"/>
        <xs:attribute name="streamNumber" type="xs:int" use="required"/>
        <xs:attribute name="enableProxy" type="xs:boolean" use="required"/>
        <xs:attribute name="proxyHostname" type="xs:string"/>
        <xs:attribute name="proxyRequireAuthentication" type="xs:boolean" use="required"/>
        <xs:attribute name="proxyUsername" type="xs:string"/>
        <xs:attribute name="proxyPassword" type="xs:string"/>
        <xs:attribute name="proxyPort" type="xs:int" use="required"/>
        <xs:attribute name="bandwidthType" type="xs:int" use="required"/>
        <xs:attribute name="bandwidthThrotting" type="xs:long" use="required"/>
        <xs:attribute name="replicationStartType" type="xs:int" use="required"/>
        <xs:attribute name="replicationStartTime" type="xs:long" use="required"/>
        <xs:attribute name="replicationStartDayOfWeek" type="xs:int" use="required"/>
        <xs:attribute name="replicationStartLoop" type="xs:int" use="required"/>
        <xs:attribute name="makeupRetryStart" type="xs:int" use="required"/>
        <xs:attribute name="makeupRetryTimes" type="xs:int" use="required"/>
        <xs:attribute name="targetPlanUuid" type="xs:string"/>
      </xs:complexType>

      <xs:complexType name="ReplicationPolicySettings">
        <xs:sequence/>
        <xs:attribute name="name" type="xs:string"/>
        <xs:attribute name="uuid" type="xs:string"/>
      </xs:complexType>

      <xs:complexType name="RPSBandWidthThrottlingSettings">
        <xs:sequence>
          <xs:element name="dailyList" type="tns:RPSDailyBandWidthThrottlingSettings" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="simpleThrottling" type="xs:long" use="required"/>
        <xs:attribute name="enableAdvancedSetting" type="xs:boolean" use="required"/>
      </xs:complexType>

      <xs:complexType name="RPSDailyBandWidthThrottlingSettings">
        <xs:sequence>
          <xs:element name="itemList" type="tns:BandWidthThrottlingItem" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="useLessField" type="xs:int" use="required"/>
      </xs:complexType>

      <xs:complexType name="BandWidthThrottlingItem">
        <xs:sequence>
          <xs:element name="startDayTime" type="ns2:dayTime" minOccurs="0"/>
          <xs:element name="endDayTime" type="ns2:dayTime" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="throttlingValue" type="xs:long" use="required"/>
      </xs:complexType>

      <xs:complexType name="mspReplicationSettings">
        <xs:sequence>
          <xs:element name="mspServer" type="tns:RPSHost" minOccurs="0"/>
          <xs:element name="mspReplicationHttpProxy" type="tns:httpProxy" minOccurs="0"/>
          <xs:element name="mspPlanSettings" type="tns:mspPlanSettings" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RPSHost">
        <xs:sequence>
          <xs:element name="rhostId" type="xs:int"/>
          <xs:element name="rhostname" type="xs:string" minOccurs="0"/>
          <xs:element name="username" type="xs:string" minOccurs="0"/>
          <xs:element name="password" type="xs:string" minOccurs="0"/>
          <xs:element name="uuid" type="xs:string" minOccurs="0"/>
          <xs:element name="port" type="xs:int"/>
          <xs:element name="httpProtocol" type="xs:boolean"/>
          <xs:element name="displayName" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="httpProxy">
        <xs:sequence>
          <xs:element name="proxyDomainname" type="xs:string" minOccurs="0"/>
          <xs:element name="proxyHostname" type="xs:string" minOccurs="0"/>
          <xs:element name="proxyPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="proxyPort" type="xs:int"/>
          <xs:element name="proxyRequiresAuth" type="xs:boolean"/>
          <xs:element name="proxyUsername" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="mspPlanSettings">
        <xs:sequence>
          <xs:element name="mspPlanGlobalUuid" type="xs:string" minOccurs="0"/>
          <xs:element name="mspPlanUuid" type="xs:string" minOccurs="0"/>
          <xs:element name="mspPlanName" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RPSDataStoreSettings">
        <xs:sequence>
          <xs:element name="dataStoreName" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreDisplayName" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="Retention">
        <xs:sequence>
          <xs:element name="retentionCount" type="xs:int"/>
          <xs:element name="dailyCount" type="xs:int"/>
          <xs:element name="weeklyCount" type="xs:int"/>
          <xs:element name="monthlyCount" type="xs:int"/>
          <xs:element name="useAdvancedRetention" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RpsEmailAlertSettings">
        <xs:complexContent>
          <xs:extension base="ns3:emailAlertBaseSettings">
            <xs:sequence/>
            <xs:attribute name="enableEmailOnMissedJob" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmail" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmailOnSuccess" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmailOnMergeFailure" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmailOnMergeSkip" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmailOnMergeSuccess" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmailOnRecoveryPointCheckFailure" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmailOnHostNotFound" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmailOnDataStoreNotEnough" type="xs:boolean" use="required"/>
            <xs:attribute name="enableEmailOnLicensefailure" type="xs:boolean" use="required"/>
            <xs:attribute name="enableSpaceNotification" type="xs:boolean" use="required"/>
            <xs:attribute name="spaceMeasureNum" type="xs:double" use="required"/>
            <xs:attribute name="spaceMeasureUnit" type="xs:string"/>
            <xs:attribute name="notifyOnNewUpdates" type="xs:boolean" use="required"/>
            <xs:attribute name="enableSrmPkiAlert" type="xs:boolean" use="required"/>
            <xs:attribute name="cpuThreshold" type="xs:int" use="required"/>
            <xs:attribute name="memoryThreshold" type="xs:int" use="required"/>
            <xs:attribute name="diskThreshold" type="xs:int" use="required"/>
            <xs:attribute name="networkThreshold" type="xs:int" use="required"/>
            <xs:attribute name="enableDataStoreSpaceNotification" type="xs:boolean" use="required"/>
            <xs:attribute name="dataStoreSpaceMeasureNum" type="xs:double" use="required"/>
            <xs:attribute name="dataStoreSpaceMeasureUnit" type="xs:string"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>

      <xs:complexType name="archiveConfig">
        <xs:sequence>
          <xs:element name="schedule" type="tns:archiveSchedule" minOccurs="0"/>
          <xs:element name="source" type="tns:archive2TapeSource" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="archiveSchedule">
        <xs:sequence>
          <xs:element name="dayItems" type="ns2:dailyScheduleDetailItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="archive2TapeSource">
        <xs:sequence>
          <xs:element name="sourceItems" type="tns:archiveSourceItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="archiveSourceItem">
        <xs:sequence>
          <xs:element name="configTime" type="xs:long"/>
          <xs:element name="dailyItem" type="tns:dailyItem" minOccurs="0"/>
          <xs:element name="monthlyItem" type="tns:monthlyItem" minOccurs="0"/>
          <xs:element name="weeklyItem" type="tns:weeklyItem" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dailyItem">
        <xs:complexContent>
          <xs:extension base="tns:intervalItem">
            <xs:sequence>
              <xs:element name="selectedDays" type="xs:int" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>

      <xs:complexType name="intervalItem">
        <xs:sequence>
          <xs:element name="bkpType" type="xs:int"/>
          <xs:element name="enabled" type="xs:boolean"/>
          <xs:element name="startTime" type="ns2:dayTime" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="monthlyItem">
        <xs:complexContent>
          <xs:extension base="tns:intervalItem">
            <xs:sequence>
              <xs:element name="dayOfMonth" type="xs:int"/>
              <xs:element name="dayOfMonthEnabled" type="xs:boolean"/>
              <xs:element name="weekDayOfMonth" type="xs:int"/>
              <xs:element name="weekNumOfMonth" type="xs:int"/>
              <xs:element name="weekOfMonthEnabled" type="xs:boolean"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>

      <xs:complexType name="weeklyItem">
        <xs:complexContent>
          <xs:extension base="tns:intervalItem">
            <xs:sequence>
              <xs:element name="dayOfWeek" type="xs:int"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>

      <xs:complexType name="archiveConfiguration">
        <xs:sequence>
          <xs:element name="advanceSchedule" type="ns2:advanceSchedule" minOccurs="0"/>
          <xs:element name="archiveSources" type="tns:archiveSourceInfoConfiguration" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="backupVolumes" type="ns3:backupVolumes" minOccurs="0"/>
          <xs:element name="cloudConfig" type="tns:archiveCloudDestInfo" minOccurs="0"/>
          <xs:element name="compressionLevel" type="xs:int" minOccurs="0"/>
          <xs:element name="encryptionPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="fileVersionRetentionCount" type="xs:int"/>
          <xs:element name="filesRetentionTime" type="xs:string" minOccurs="0"/>
          <xs:element name="RRSFlag" type="xs:long"/>
          <xs:element name="retentiontime" type="xs:string" minOccurs="0"/>
          <xs:element name="selectedSourceId" type="xs:string" minOccurs="0"/>
          <xs:element name="strArchiveDestinationPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="strArchiveDestinationUserName" type="xs:string" minOccurs="0"/>
          <xs:element name="strArchiveToDrivePath" type="xs:string" minOccurs="0"/>
          <xs:element name="strCatalogPath" type="xs:string" minOccurs="0"/>
          <xs:element name="strScheduleMode" type="xs:string" minOccurs="0"/>
          <xs:element name="bArchiveAfterBackup" type="xs:boolean"/>
          <xs:element name="bArchiveExcludeAppFiles" type="xs:boolean"/>
          <xs:element name="bArchiveExcludeSystemFiles" type="xs:boolean"/>
          <xs:element name="bArchiveToCloud" type="xs:boolean"/>
          <xs:element name="bArchiveToDrive" type="xs:boolean"/>
          <xs:element name="bDailyBackup" type="xs:boolean"/>
          <xs:element name="bEncryption" type="xs:boolean"/>
          <xs:element name="bMonthlyBackup" type="xs:boolean"/>
          <xs:element name="bPurgeArchiveItems" type="xs:boolean"/>
          <xs:element name="bPurgeScheduleAvailable" type="xs:boolean"/>
          <xs:element name="bWeeklyBackup" type="xs:boolean"/>
          <xs:element name="backupDestination" type="xs:string" minOccurs="0"/>
          <xs:element name="iArchiveAfterNBackups" type="xs:int"/>
          <xs:element name="iPurgeAfterDays" type="xs:int"/>
          <xs:element name="iSpaceUtilization" type="xs:int" minOccurs="0"/>
          <xs:element name="lPurgeStartTime" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="archiveSourceInfoConfiguration">
        <xs:sequence>
          <xs:element name="archiveSourceFiltersConfig" type="tns:archiveSourceFiltersConfiguration" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="strDisplaySourcePath" type="xs:string" minOccurs="0"/>
          <xs:element name="strSourcePath" type="xs:string" minOccurs="0"/>
          <xs:element name="bArchiveFiles" type="xs:boolean"/>
          <xs:element name="bCopyFiles" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="archiveSourceFiltersConfiguration">
        <xs:sequence>
          <xs:element name="criteriaOperator" type="xs:string" minOccurs="0"/>
          <xs:element name="filterOrCriteriaHigherValue" type="xs:string" minOccurs="0"/>
          <xs:element name="filterOrCriteriaLowerValue" type="xs:string" minOccurs="0"/>
          <xs:element name="filterOrCriteriaName" type="xs:string" minOccurs="0"/>
          <xs:element name="filterOrCriteriaType" type="xs:string" minOccurs="0"/>
          <xs:element name="isCriteria" type="xs:boolean"/>
          <xs:element name="isDefaultFilter" type="xs:boolean"/>
          <xs:element name="locFilterOrCriteriaLowerValue" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="archiveCloudDestInfo">
        <xs:sequence>
          <xs:element name="accountName" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudSubVendorType" type="xs:long"/>
          <xs:element name="encodedCloudBucketName" type="xs:string" minOccurs="0"/>
          <xs:element name="id" type="xs:int"/>
          <xs:element name="RRSFlag" type="xs:long"/>
          <xs:element name="cloudBucketName" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudBucketRegionName" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudCertificatePassword" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudCertificatePath" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudProxyPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudProxyPort" type="xs:long"/>
          <xs:element name="cloudProxyRequireAuth" type="xs:boolean"/>
          <xs:element name="cloudProxyServerName" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudProxyUserName" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudUseProxy" type="xs:boolean"/>
          <xs:element name="cloudVendorHostName" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudVendorPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudVendorPort" type="xs:long"/>
          <xs:element name="cloudVendorType" type="xs:long"/>
          <xs:element name="cloudVendorURL" type="xs:string" minOccurs="0"/>
          <xs:element name="cloudVendorUserName" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobActivityLogs">
        <xs:sequence>
          <xs:element name="arg0" type="xs:long"/>
          <xs:element name="arg1" type="xs:int"/>
          <xs:element name="arg2" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobActivityLogsResponse">
        <xs:sequence>
          <xs:element name="return" type="ns4:ActivityLogResult" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="checkIsSeedingRunning">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="checkIsSeedingRunningResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getEdgeRpsRegInfo">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getEdgeRpsRegInfoResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:RPSRegInfo" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RPSRegInfo">
        <xs:sequence>
          <xs:element name="RpsAppHostName" type="xs:string"/>
          <xs:element name="RpsAppUUID" type="xs:string"/>
          <xs:element name="RpsAppWSDL" type="xs:string"/>
          <xs:element name="RpsAppLocale" type="xs:string"/>
          <xs:element name="ConsoleUrl" type="xs:string"/>
          <xs:element name="rpsConnectNameList" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRecoveryPoints">
        <xs:sequence>
          <xs:element name="arg0" type="ns2:connectionInfo" minOccurs="0"/>
          <xs:element name="arg1" type="xs:dateTime" minOccurs="0"/>
          <xs:element name="arg2" type="xs:dateTime" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRecoveryPointsResponse">
        <xs:sequence>
          <xs:element name="return" type="ns5:RecoveryPoint" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="deleteNodesFromDataStore">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="deleteNodesFromDataStoreResponse">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getHashRoleEnvInfo">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getHashRoleEnvInfoResponse">
        <xs:sequence>
          <xs:element name="return" form="qualified" minOccurs="0">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="PhysMemory" type="xs:unsignedLong"/>
                <xs:element name="SSDList">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="SSD" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:simpleContent>
                            <xs:extension base="xs:integer">
                              <xs:attribute name="label" type="xs:string" use="required"/>
                              <xs:attribute name="iops" type="xs:unsignedShort" use="required"/>
                            </xs:extension>
                          </xs:simpleContent>
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RPSResumeJob">
        <xs:sequence>
          <xs:element name="arg0" type="tns:controlJobFilter" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="controlJobFilter">
        <xs:sequence>
          <xs:element name="d2DNameList" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="jobIDList" type="xs:long" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="jobType" type="xs:long"/>
          <xs:element name="policyIDList" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="RPSNameList" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RPSResumeJobResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSRunningJobs">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSRunningJobsResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsJobInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="rpsJobInfo">
        <xs:sequence>
          <xs:element name="d2dServerName" type="xs:string" minOccurs="0"/>
          <xs:element name="rpsServerName" type="xs:string" minOccurs="0"/>
          <xs:element name="d2duuid" type="xs:string" minOccurs="0"/>
          <xs:element name="rpsuuid" type="xs:string" minOccurs="0"/>
          <xs:element name="policyUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="planUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="targetPlanUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreName" type="xs:string" minOccurs="0"/>
          <xs:element name="startTime" type="xs:dateTime" minOccurs="0"/>
          <xs:element name="jobType" type="xs:long"/>
          <xs:element name="jobMethod" type="xs:int"/>
          <xs:element name="jobId" type="xs:long"/>
          <xs:element name="jobIdentity" type="xs:string" minOccurs="0"/>
          <xs:element name="jobStatus" type="tns:rpsJobStatus" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreInstance">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreInstanceResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataStoreSettingInfo" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dataStoreSettingInfo">
        <xs:sequence>
          <xs:element name="compressionMethod" type="xs:int"/>
          <xs:element name="DSCommSetting" type="tns:dataStoreCommonInfo" minOccurs="0"/>
          <xs:element name="datastore_id" type="xs:int"/>
          <xs:element name="datastore_name" type="xs:string" minOccurs="0"/>
          <xs:element name="displayName" type="xs:string" minOccurs="0"/>
          <xs:element name="enableCompression" type="xs:long"/>
          <xs:element name="enableEncryption" type="xs:long"/>
          <xs:element name="enableGDD" type="xs:long"/>
          <xs:element name="encryptionMethod" type="xs:int"/>
          <xs:element name="encryptionPwd" type="xs:string" minOccurs="0"/>
          <xs:element name="flags" type="xs:long"/>
          <xs:element name="GDDSetting" type="tns:dedupSettingInfo" minOccurs="0"/>
          <xs:element name="maxNodeCount" type="xs:int"/>
          <xs:element name="node_id" type="xs:int"/>
          <xs:element name="ownershipHostName" type="xs:string" minOccurs="0"/>
          <xs:element name="ownershipHostSID" type="xs:string" minOccurs="0"/>
          <xs:element name="status" type="xs:int"/>
          <xs:element name="version" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dataStoreCommonInfo">
        <xs:sequence>
          <xs:element name="errorThreshold" type="xs:double"/>
          <xs:element name="flags" type="xs:long"/>
          <xs:element name="password" type="xs:string" minOccurs="0"/>
          <xs:element name="storePath" type="xs:string" minOccurs="0"/>
          <xs:element name="storeSharedName" type="xs:string" minOccurs="0"/>
          <xs:element name="user" type="xs:string" minOccurs="0"/>
          <xs:element name="warnThreshold" type="xs:double"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dedupSettingInfo">
        <xs:sequence>
          <xs:element name="blockSize" type="xs:int"/>
          <xs:element name="dataCapacity" type="xs:int"/>
          <xs:element name="dataStoreErrorThreshold" type="xs:double"/>
          <xs:element name="dataStorePassword" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStorePath" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreUser" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreWarnThreshold" type="xs:double"/>
          <xs:element name="hashRoleMode" type="xs:int"/>
          <xs:element name="hashStoreErrorThreshold" type="xs:double"/>
          <xs:element name="hashStorePassword" type="xs:string" minOccurs="0"/>
          <xs:element name="hashStorePath" type="xs:string" minOccurs="0"/>
          <xs:element name="hashStoreUser" type="xs:string" minOccurs="0"/>
          <xs:element name="hashStoreWarnThreshold" type="xs:double"/>
          <xs:element name="indexStoreErrorThreshold" type="xs:double"/>
          <xs:element name="indexStorePassword" type="xs:string" minOccurs="0"/>
          <xs:element name="indexStorePath" type="xs:string" minOccurs="0"/>
          <xs:element name="indexStoreUser" type="xs:string" minOccurs="0"/>
          <xs:element name="indexStoreWarnThreshold" type="xs:double"/>
          <xs:element name="memMinRequireSize" type="xs:long"/>
          <xs:element name="memoryErrorThreshold" type="xs:double"/>
          <xs:element name="memorySize" type="xs:int"/>
          <xs:element name="memoryWarnThreshold" type="xs:double"/>
          <xs:element name="storeName" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobHistory">
        <xs:sequence>
          <xs:element name="arg0" type="xs:int"/>
          <xs:element name="arg1" type="xs:int"/>
          <xs:element name="arg2" type="tns:flashJobHistoryFilter" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="flashJobHistoryFilter">
        <xs:sequence>
          <xs:element name="agentNodeUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="endTime" type="xs:dateTime" minOccurs="0"/>
          <xs:element name="jobID" type="xs:long"/>
          <xs:element name="jobStatus" type="xs:int"/>
          <xs:element name="jobType" type="xs:long"/>
          <xs:element name="startTime" type="xs:dateTime" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobHistoryResponse">
        <xs:sequence>
          <xs:element name="return" type="ns6:FlashJobHistoryResult" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="flashJobHistory">
        <xs:sequence>
          <xs:element name="datastoreUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="jobDisposeNode" type="xs:string" minOccurs="0"/>
          <xs:element name="jobDisposeNodeUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="jobId" type="xs:long"/>
          <xs:element name="jobLocalEndTime" type="xs:string" minOccurs="0"/>
          <xs:element name="jobLocalStartTime" type="xs:string" minOccurs="0"/>
          <xs:element name="jobMethod" type="xs:long"/>
          <xs:element name="jobName" type="xs:string" minOccurs="0"/>
          <xs:element name="jobRunningNode" type="xs:string" minOccurs="0"/>
          <xs:element name="jobRunningNodeUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="jobStatus" type="xs:long"/>
          <xs:element name="jobType" type="xs:long"/>
          <xs:element name="jobUTCEndTime" type="xs:string" minOccurs="0"/>
          <xs:element name="jobUTCStartTime" type="xs:string" minOccurs="0"/>
          <xs:element name="planUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="sourceUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="targetDatastoreUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="targetPlanUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="targetUUID" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="isPathInDataStore">
        <xs:sequence>
          <xs:element name="arg0" type="ns2:connectionInfo" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="isPathInDataStoreResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="register4Console">
        <xs:sequence>
          <xs:element name="arg0" type="tns:RPSRegInfo" minOccurs="0"/>
          <xs:element name="arg1" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="register4ConsoleResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:int" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="cancelJob">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:long"/>
          <xs:element name="arg2" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="cancelJobResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getMostRecentRecoveryPoints">
        <xs:sequence>
          <xs:element name="arg0" type="tns:connectionInfoEx" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="connectionInfoEx">
        <xs:complexContent>
          <xs:extension base="ns2:connectionInfo">
            <xs:sequence>
              <xs:element name="clientName" type="xs:string" minOccurs="0"/>
              <xs:element name="clientUUID" type="xs:string" minOccurs="0"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>

      <xs:complexType name="getMostRecentRecoveryPointsResponse">
        <xs:sequence>
          <xs:element name="return" type="ns5:MostRecentRecoveryPoint" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="updateAdminAccount">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="updateAdminAccountResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:int" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="startDataStoreInstance">
        <xs:sequence>
          <xs:element name="arg0" type="tns:dataStoreOperationElement" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dataStoreOperationElement">
        <xs:sequence>
          <xs:element name="dataStoreUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="bForce" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="startDataStoreInstanceResponse">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="createFolderWithDetails">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
          <xs:element name="arg3" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="createFolderWithDetailsResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDefaultJobHistoryFilter">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getDefaultJobHistoryFilterResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:flashJobHistoryFilter" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreInfo4Lightintegration">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreInfo4LightintegrationResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:DataStoreInfo" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="DataStoreInfo">
        <xs:sequence/>
        <xs:attribute name="dsID" type="xs:string"/>
        <xs:attribute name="fullBackupDestination" type="xs:string"/>
        <xs:attribute name="desUser" type="xs:string"/>
        <xs:attribute name="desPassword" type="xs:string"/>
        <xs:attribute name="dsPassword" type="xs:string"/>
        <xs:attribute name="dsCommonPath" type="xs:string"/>
      </xs:complexType>

      <xs:complexType name="createFolder">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="createFolderResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="submitFSOndemandCatalogJob">
        <xs:sequence>
          <xs:element name="arg0" type="tns:catalogJobPara" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="catalogJobPara">
        <xs:sequence>
          <xs:element name="agentName" type="xs:string" minOccurs="0"/>
          <xs:element name="agentSID" type="xs:string" minOccurs="0"/>
          <xs:element name="agentUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="backupDestination" type="xs:string" minOccurs="0"/>
          <xs:element name="currentAgent" type="xs:string" minOccurs="0"/>
          <xs:element name="currentAgentSID" type="xs:string" minOccurs="0"/>
          <xs:element name="currentAgentUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="currentCatalogStatus" type="xs:long"/>
          <xs:element name="dataStoreName" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="destPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="destUserName" type="xs:string" minOccurs="0"/>
          <xs:element name="encryptionPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="grtEdbList" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="password" type="xs:string" minOccurs="0"/>
          <xs:element name="rpsHttp" type="xs:boolean"/>
          <xs:element name="rpsPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="rpsPort" type="xs:int"/>
          <xs:element name="rpsServerName" type="xs:string" minOccurs="0"/>
          <xs:element name="rpsUserName" type="xs:string" minOccurs="0"/>
          <xs:element name="sessionNumber" type="xs:long"/>
          <xs:element name="subSessionNumber" type="xs:long"/>
          <xs:element name="userName" type="xs:string" minOccurs="0"/>
          <xs:element name="vmInstanceUUID" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="submitFSOndemandCatalogJobResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobMonitorLog">
        <xs:sequence>
          <xs:element name="arg0" type="xs:long" minOccurs="0"/>
          <xs:element name="arg1" type="xs:long" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobMonitorLogResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:jobMonitorLog" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="jobMonitorLog">
        <xs:sequence>
          <xs:element name="id" type="xs:long" minOccurs="0"/>
          <xs:element name="jobId" type="xs:long" minOccurs="0"/>
          <xs:element name="message" type="xs:string" minOccurs="0"/>
          <xs:element name="type" type="xs:long" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRecoveryPointsWithNodeInfo">
        <xs:sequence>
          <xs:element name="arg0" type="ns2:connectionInfo" minOccurs="0"/>
          <xs:element name="arg1" type="xs:dateTime" minOccurs="0"/>
          <xs:element name="arg2" type="xs:dateTime" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRecoveryPointsWithNodeInfoResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:recoveryPointWithNodeInfo" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="recoveryPointWithNodeInfo">
        <xs:sequence>
          <xs:element name="fullPath" type="xs:string" minOccurs="0"/>
          <xs:element name="integral" type="xs:boolean"/>
          <xs:element name="nodeName" type="xs:string" minOccurs="0"/>
          <xs:element name="recoveryPoints" type="ns5:RecoveryPoint" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getVolumesWithDetails">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getVolumesWithDetailsResponse">
        <xs:sequence>
          <xs:element name="return" type="ns7:Volume" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="DataStoreUpdateDSPathStatus">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="DataStoreUpdateDSPathStatusResponse">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getServerTime">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getServerTimeResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:dateTime" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="removeDataStoreInstance">
        <xs:sequence>
          <xs:element name="arg0" type="tns:dataStoreOperationElement" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="removeDataStoreInstanceResponse">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getActivityLogs">
        <xs:sequence>
          <xs:element name="arg0" type="xs:int"/>
          <xs:element name="arg1" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getActivityLogsResponse">
        <xs:sequence>
          <xs:element name="return" type="ns4:ActivityLogResult" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSWaitingJobsByType">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSWaitingJobsByTypeResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsJobInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="registerD2DList">
        <xs:sequence>
          <xs:element name="arg0" type="tns:registerNodeInfo" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="registerNodeInfo">
        <xs:sequence>
          <xs:element name="backupDestination" type="xs:string" minOccurs="0"/>
          <xs:element name="clientUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="d2dSID" type="xs:string" minOccurs="0"/>
          <xs:element name="ipList" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="linuxNode" type="xs:boolean"/>
          <xs:element name="loginUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="nodeName" type="xs:string" minOccurs="0"/>
          <xs:element name="policyUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="port" type="xs:long" minOccurs="0"/>
          <xs:element name="protocol" type="xs:string" minOccurs="0"/>
          <xs:element name="vmHostName" type="xs:string" minOccurs="0"/>
          <xs:element name="vmInstanceUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="vmName" type="xs:string" minOccurs="0"/>
          <xs:element name="vmUUID" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="registerD2DListResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateDest">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
          <xs:element name="arg3" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateDestResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSServerID">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getRPSServerIDResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="importDataStoreInstance">
        <xs:sequence>
          <xs:element name="arg0" type="tns:dataStoreSettingInfo" minOccurs="0"/>
          <xs:element name="arg1" type="xs:boolean"/>
          <xs:element name="arg2" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="importDataStoreInstanceResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataStoreSettingInfo" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="stopDataStoreInstance">
        <xs:sequence>
          <xs:element name="arg0" type="tns:dataStoreOperationElement" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="stopDataStoreInstanceResponse">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="saveRPSPolicy">
        <xs:sequence>
          <xs:element name="arg0" type="tns:rpsPolicy" minOccurs="0"/>
          <xs:element name="arg1" type="tns:disabledNodes" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="disabledNodes">
        <xs:sequence>
          <xs:element name="disablePlan" type="xs:boolean"/>
          <xs:element name="disabledNodes" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="policyID" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="saveRPSPolicyResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:string" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getMappedNetworkPath">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getMappedNetworkPathResponse">
        <xs:sequence>
          <xs:element name="return" type="ns2:networkPath" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateSessPasswordByHash">
        <xs:sequence>
          <xs:element name="arg0" type="tns:rpsSessPwdValidationItem" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="rpsSessPwdValidationItem">
        <xs:sequence>
          <xs:element name="correct" type="xs:boolean" minOccurs="0"/>
          <xs:element name="pwdHash" type="xs:string" minOccurs="0"/>
          <xs:element name="sessionPwd" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateSessPasswordByHashResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsSessPwdValidationItem" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSSummary">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSSummaryResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsSummary" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="rpsSummary">
        <xs:sequence>
          <xs:element name="dataStoreDispName" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreErrorCode" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreName" type="xs:string" minOccurs="0"/>
          <xs:element name="policyId" type="xs:string" minOccurs="0"/>
          <xs:element name="policyName" type="xs:string" minOccurs="0"/>
          <xs:element name="replicationTo" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateUserByUUID">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateUserByUUIDResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:int" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="submitSeedingJob">
        <xs:sequence>
          <xs:element name="arg0" type="tns:seedingJobParameter" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="seedingJobParameter">
        <xs:sequence>
          <xs:element name="items" type="tns:seedingItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="maxRunningNodes" type="xs:int"/>
          <xs:element name="policyUUID" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="seedingItem">
        <xs:sequence>
          <xs:element name="clientName" type="xs:string" minOccurs="0"/>
          <xs:element name="clientUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="migrationRPInfo" type="tns:migrationRPItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="shareFolderPassword" type="xs:string" minOccurs="0"/>
          <xs:element name="shareFolderUserName" type="xs:string" minOccurs="0"/>
          <xs:element name="srcShareFolderPath" type="xs:string" minOccurs="0"/>
          <xs:element name="bSeedingFromShare" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="migrationRPItem">
        <xs:sequence>
          <xs:element name="sessionGuid" type="xs:string" minOccurs="0"/>
          <xs:element name="sessionPwd" type="xs:string" minOccurs="0"/>
          <xs:element name="targetSessionPwd" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="submitSeedingJobResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getVolumes">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getVolumesResponse">
        <xs:sequence>
          <xs:element name="return" type="ns7:Volume" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="modifyDataStoreInstance">
        <xs:sequence>
          <xs:element name="arg0" type="tns:dataStoreSettingInfo" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="modifyDataStoreInstanceResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataStoreSettingInfo" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="establishTrust">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="establishTrustResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:string" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSJobs">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getRPSJobsResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsJobInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRegistedClientList">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getRegistedClientListResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:BackupD2D" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="BackupD2D">
        <xs:sequence/>
        <xs:attribute name="hostname" type="xs:string"/>
        <xs:attribute name="fullBackupDestination" type="xs:string"/>
        <xs:attribute name="destination" type="xs:string"/>
        <xs:attribute name="desPassword" type="xs:string"/>
        <xs:attribute name="desUsername" type="xs:string"/>
        <xs:attribute name="datastoreName" type="xs:string"/>
        <xs:attribute name="datastoreUUID" type="xs:string"/>
        <xs:attribute name="policyUUID" type="xs:string"/>
        <xs:attribute name="loginUUID" type="xs:string"/>
        <xs:attribute name="clientUUID" type="xs:string"/>
        <xs:attribute name="vm" type="xs:boolean" use="required"/>
        <xs:attribute name="replicatedClient" type="xs:boolean" use="required"/>
        <xs:attribute name="port" type="xs:long" use="required"/>
        <xs:attribute name="protocol" type="xs:string"/>
        <xs:attribute name="planUUID" type="xs:string"/>
        <xs:attribute name="lastBackupTime" type="xs:long" use="required"/>
        <xs:attribute name="enableEncryption" type="xs:long" use="required"/>
        <xs:attribute name="username" type="xs:string"/>
        <xs:attribute name="destPlanName" type="xs:string"/>
        <xs:attribute name="sourceRPSServerName" type="xs:string"/>
        <xs:attribute name="rawDataSizeB" type="xs:long" use="required"/>
        <xs:attribute name="dataSizeB" type="xs:long" use="required"/>
        <xs:attribute name="isIntegral" type="xs:boolean" use="required"/>
        <xs:attribute name="isPurging" type="xs:boolean" use="required"/>
        <xs:attribute name="D2DSid" type="xs:string"/>
        <xs:attribute name="vmUUID" type="xs:string"/>
        <xs:attribute name="vmHostName" type="xs:string"/>
      </xs:complexType>

      <xs:complexType name="getClientWaitingJobs">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getClientWaitingJobsResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsJobInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreFreeMemory">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getDataStoreFreeMemoryResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="addDataStoreInstance">
        <xs:sequence>
          <xs:element name="arg0" type="tns:dataStoreSettingInfo" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="addDataStoreInstanceResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataStoreSettingInfo" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getVersionInfo">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getVersionInfoResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsVersionInfo" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="rpsVersionInfo">
        <xs:sequence>
          <xs:element name="buildNumber" type="xs:string" minOccurs="0"/>
          <xs:element name="majorVersion" type="xs:string" minOccurs="0"/>
          <xs:element name="minorVersion" type="xs:string" minOccurs="0"/>
          <xs:element name="updateNumber" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getClientRunningJobs">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getClientRunningJobsResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsJobInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateStoreUpperLimit">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateStoreUpperLimitResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="startReplicationNow">
        <xs:sequence>
          <xs:element name="arg0" type="tns:manualReplicationItem" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="manualReplicationItem">
        <xs:sequence>
          <xs:element name="nodeUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="policyUUID" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="startReplicationNowResponse">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="validateUser">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="validateUserResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:string" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="pauseMerge">
        <xs:sequence>
          <xs:element name="arg0" type="tns:mergeAPISource" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="pauseMergeResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:int" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobMonitorsByType">
        <xs:sequence>
          <xs:element name="arg0" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobMonitorsByTypeResponse">
        <xs:sequence>
          <xs:element name="return" type="ns2:flashJobMonitor" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="vmSnapshotsInfo">
        <xs:sequence>
          <xs:element name="snapGuid" type="xs:string" minOccurs="0"/>
          <xs:element name="sessionName" type="xs:string" minOccurs="0"/>
          <xs:element name="sessionGuid" type="xs:string" minOccurs="0"/>
          <xs:element name="timestamp" type="xs:long"/>
          <xs:element name="localTime" type="xs:string" minOccurs="0"/>
          <xs:element name="snapNo" type="xs:long"/>
          <xs:element name="bootableSnapGuid" type="xs:string" minOccurs="0"/>
          <xs:element name="isPowerOffBackup" type="xs:boolean"/>
          <xs:element name="desc" type="xs:string" minOccurs="0"/>
          <xs:element name="timeZoneOffset" type="xs:long"/>
          <xs:element name="ipSettings" type="tns:ipSetting" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="isPowerOnWithIPSettings" type="xs:boolean"/>
          <xs:element name="dnsParameters" type="tns:dnsUpdaterParameters" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="ipSetting">
        <xs:sequence>
          <xs:element name="autoDNS" type="xs:boolean"/>
          <xs:element name="autoWins" type="xs:boolean"/>
          <xs:element name="dhcp" type="xs:boolean"/>
          <xs:element name="dnses" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="gateways" type="tns:gateway" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="ipAddresses" type="tns:ipAddressInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="nicType" type="xs:string" minOccurs="0"/>
          <xs:element name="version" type="xs:string" minOccurs="0"/>
          <xs:element name="virtualNetwork" type="xs:string" minOccurs="0"/>
          <xs:element name="wins" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="gateway">
        <xs:sequence>
          <xs:element name="gatewayAddress" type="xs:string" minOccurs="0"/>
          <xs:element name="gatewayMetric" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="ipAddressInfo">
        <xs:sequence>
          <xs:element name="ip" type="xs:string" minOccurs="0"/>
          <xs:element name="subnet" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dnsUpdaterParameters">
        <xs:sequence>
          <xs:element name="credential" type="xs:string" minOccurs="0"/>
          <xs:element name="dns" type="xs:string" minOccurs="0"/>
          <xs:element name="dnsServerType" type="xs:int"/>
          <xs:element name="hostIp" type="xs:string" minOccurs="0"/>
          <xs:element name="hostname" type="xs:string" minOccurs="0"/>
          <xs:element name="keyFile" type="xs:string" minOccurs="0"/>
          <xs:element name="ttl" type="xs:int"/>
          <xs:element name="username" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="mergeStatus">
        <xs:complexContent>
          <xs:extension base="ns2:flashJobMonitor">
            <xs:sequence>
              <xs:element name="canResume" type="xs:boolean"/>
              <xs:element name="inSchedule" type="xs:boolean"/>
              <xs:element name="jobMonitor" type="tns:mergeJobMonitor" minOccurs="0"/>
              <xs:element name="manualPause" type="xs:boolean"/>
              <xs:element name="recoverySet" type="xs:boolean"/>
              <xs:element name="rpsuuid" type="xs:string" minOccurs="0"/>
              <xs:element name="status" type="tns:status" minOccurs="0"/>
              <xs:element name="stopTimes" type="xs:int"/>
              <xs:element name="UUID" type="xs:string" minOccurs="0"/>
              <xs:element name="updateTime" type="xs:long"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>

      <xs:complexType name="mergeJobMonitor">
        <xs:sequence>
          <xs:element name="currentMergeRangeEnd" type="xs:int"/>
          <xs:element name="currentMergeRangeStart" type="xs:int"/>
          <xs:element name="dwCurDiskSig2Merge" type="xs:int"/>
          <xs:element name="dwCurSess2Merge" type="xs:int"/>
          <xs:element name="dwDiskCnt2Merge" type="xs:int"/>
          <xs:element name="dwDiskCntMerged" type="xs:int"/>
          <xs:element name="dwEndStart" type="xs:int"/>
          <xs:element name="dwJobID" type="xs:int"/>
          <xs:element name="dwMergeMethod" type="xs:int"/>
          <xs:element name="dwMergeOpt" type="xs:int"/>
          <xs:element name="dwMergePhase" type="xs:int"/>
          <xs:element name="dwRetentionCnt" type="xs:int"/>
          <xs:element name="dwSessCnt2Merge" type="xs:int"/>
          <xs:element name="dwSessCntMerged" type="xs:int"/>
          <xs:element name="dwSessRangeCnt" type="xs:int"/>
          <xs:element name="dwSessRangeDoneCnt" type="xs:int"/>
          <xs:element name="dwSessStart" type="xs:int"/>
          <xs:element name="jobStatus" type="xs:int"/>
          <xs:element name="timeRemain" type="xs:long"/>
          <xs:element name="ullDiskBytes2Merge" type="xs:long"/>
          <xs:element name="ullDiskBytesMerged" type="xs:long"/>
          <xs:element name="ullElapsedTime" type="xs:long"/>
          <xs:element name="ullSessBytes2Merge" type="xs:long"/>
          <xs:element name="ullSessBytesMerged" type="xs:long"/>
          <xs:element name="ullStartTime" type="xs:long"/>
          <xs:element name="ullTotalBytes2Merge" type="xs:long"/>
          <xs:element name="ullTotalBytesMerged" type="xs:long"/>
          <xs:element name="VHDMerge" type="xs:boolean"/>
          <xs:element name="vmInstanceUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="fMergePercentage" type="xs:float"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="repJobMonitor">
        <xs:sequence>
          <xs:element name="currentJobCancelled" type="xs:boolean"/>
          <xs:element name="currentSnapshotCount" type="xs:int"/>
          <xs:element name="first" type="xs:boolean"/>
          <xs:element name="id" type="xs:long"/>
          <xs:element name="nodeId" type="xs:int"/>
          <xs:element name="repElapsedTime" type="xs:long"/>
          <xs:element name="repJobElapsedTime" type="xs:long"/>
          <xs:element name="repJobID" type="xs:string" minOccurs="0"/>
          <xs:element name="repJobStartTime" type="xs:long"/>
          <xs:element name="repJobStatus" type="xs:long"/>
          <xs:element name="repPhase" type="xs:int"/>
          <xs:element name="repSessionBackupTime" type="xs:long"/>
          <xs:element name="repSessionName" type="xs:string" minOccurs="0"/>
          <xs:element name="repStartNanoTime" type="xs:long"/>
          <xs:element name="repStartTime" type="xs:long"/>
          <xs:element name="repTotalSize" type="xs:long"/>
          <xs:element name="repTransAfterResume" type="xs:long"/>
          <xs:element name="repTransBeforeResume" type="xs:long"/>
          <xs:element name="repTransedSize" type="xs:long"/>
          <xs:element name="targetMachine" type="xs:string" minOccurs="0"/>
          <xs:element name="toRepSessions" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="toRepSessionsSize" type="xs:long"/>
          <xs:element name="totalSessionNumbers" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRegistedClientByDatastore">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRegistedClientByDatastoreResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:BackupD2D" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSWaitingJobs">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSWaitingJobsResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsJobInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getVolumeSize4DataStore">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getVolumeSize4DataStoreResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsDataStoreVolumeSize" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="rpsDataStoreVolumeSize">
        <xs:sequence>
          <xs:element name="capacitySapce" type="xs:long"/>
          <xs:element name="usedSpace" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="queryCatalogStatus">
        <xs:sequence>
          <xs:element name="arg0" type="tns:rpsCatalogJobQueryItem" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="rpsCatalogJobQueryItem">
        <xs:sequence>
          <xs:element name="backupDest" type="xs:string" minOccurs="0"/>
          <xs:element name="clientuuid" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="domain" type="xs:string" minOccurs="0"/>
          <xs:element name="password" type="xs:string" minOccurs="0"/>
          <xs:element name="statusItem" type="tns:rpsCatalogStatusItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="userName" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="rpsCatalogStatusItem">
        <xs:sequence>
          <xs:element name="catalogStatus" type="xs:long"/>
          <xs:element name="sessnum" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="queryCatalogStatusResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsCatalogStatusItem" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreStatus">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreStatusResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataStoreStatusListElem" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dataStoreStatusListElem">
        <xs:sequence>
          <xs:element name="associatedPlan" type="xs:string" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="dataStoreSetting" type="tns:dataStoreSettingInfo" minOccurs="0"/>
          <xs:element name="dataStoreStatus" type="tns:dataStoreStatus" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dataStoreStatus">
        <xs:sequence>
          <xs:element name="commonStoreStatus" type="tns:dataStoreCommonStatus" minOccurs="0"/>
          <xs:element name="compressDataSize" type="xs:long"/>
          <xs:element name="elapsedTimeInSec" type="xs:long"/>
          <xs:element name="enableGDD" type="xs:long"/>
          <xs:element name="estRemainTimeInSec" type="xs:long"/>
          <xs:element name="flags" type="xs:long"/>
          <xs:element name="GDDStoreStatus" type="tns:dedupInstanceStatus" minOccurs="0"/>
          <xs:element name="overallHealthStatus" type="tns:dataStoreHealthStatus" minOccurs="0"/>
          <xs:element name="overallHealthStatusMessage" type="xs:string" minOccurs="0"/>
          <xs:element name="overallStatus" type="xs:long"/>
          <xs:element name="statusErrorCode" type="xs:long"/>
          <xs:element name="statusErrorMessage" type="xs:string" minOccurs="0"/>
          <xs:element name="timeStamp" type="xs:long"/>
          <xs:element name="totalSrcDataSize" type="xs:long"/>
          <xs:element name="uniqueDataSize" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dataStoreCommonStatus">
        <xs:sequence>
          <xs:element name="DataVolumeTotalSize" type="xs:long"/>
          <xs:element name="DataVolumeFreeSize" type="xs:long"/>
          <xs:element name="DataDirSize" type="xs:long"/>
          <xs:element name="DataVolumeUsedSize" type="xs:long"/>
          <xs:element name="healthStatus" type="tns:dataStoreHealthStatus" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dedupInstanceStatus">
        <xs:sequence>
          <xs:element name="Flags" type="xs:long"/>
          <xs:element name="PortRangeBegin" type="xs:long"/>
          <xs:element name="PortRangeEnd" type="xs:long"/>
          <xs:element name="PrimaryRoleStatus" type="tns:dedupPrimaryRoleStatus" minOccurs="0"/>
          <xs:element name="HashRoleStatusArray" type="tns:dedupHashRoleStatus" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="DataRoleStatusArray" type="tns:dedupDataRoleStatus" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dedupPrimaryRoleStatus">
        <xs:sequence>
          <xs:element name="healthStatus" type="tns:dataStoreHealthStatus" minOccurs="0"/>
          <xs:element name="indexDirSize" type="xs:long"/>
          <xs:element name="indexVolumeFreeSize" type="xs:long"/>
          <xs:element name="indexVolumeTotalSize" type="xs:long"/>
          <xs:element name="indexVolumeUsedSize" type="xs:long"/>
          <xs:element name="jobStatus" type="xs:int"/>
          <xs:element name="roleCurrentState" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dedupHashRoleStatus">
        <xs:sequence>
          <xs:element name="dsMemhealthStatus" type="tns:dataStoreHealthStatus" minOccurs="0"/>
          <xs:element name="hashDirMinRequireSize" type="xs:long"/>
          <xs:element name="hashDirSize" type="xs:long"/>
          <xs:element name="hashVolumeFreeSize" type="xs:long"/>
          <xs:element name="hashVolumeTotalSize" type="xs:long"/>
          <xs:element name="hashVolumeUsedSize" type="xs:long"/>
          <xs:element name="memAvailSize" type="xs:long"/>
          <xs:element name="memMinRequireSize" type="xs:long"/>
          <xs:element name="memTotalSize" type="xs:long"/>
          <xs:element name="memUsedByHashRole" type="xs:long"/>
          <xs:element name="pathHealthStatus" type="tns:dataStoreHealthStatus" minOccurs="0"/>
          <xs:element name="roleCurrentState" type="xs:int"/>
          <xs:element name="sysMemhealthStatus" type="tns:dataStoreHealthStatus" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dedupDataRoleStatus">
        <xs:sequence>
          <xs:element name="dataDirSize" type="xs:long"/>
          <xs:element name="dataVolumeFreeSize" type="xs:long"/>
          <xs:element name="dataVolumeTotalSize" type="xs:long"/>
          <xs:element name="dataVolumeUsedSize" type="xs:long"/>
          <xs:element name="healthStatus" type="tns:dataStoreHealthStatus" minOccurs="0"/>
          <xs:element name="roleCurrentState" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="DataStoreGetDedupeRequiredMinMemSizeByte">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="DataStoreGetDedupeRequiredMinMemSizeByteResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="login">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="loginResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:string" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreInfoFromDisk">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
          <xs:element name="arg3" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreInfoFromDiskResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataStoreSettingInfo" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataSizesFromStorage">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:boolean"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
          <xs:element name="arg3" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataSizesFromStorageResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataSizesFromStorage" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dataSizesFromStorage">
        <xs:sequence>
          <xs:element name="dataStorageSize" type="xs:long"/>
          <xs:element name="destination" type="xs:string" minOccurs="0"/>
          <xs:element name="nodeName" type="xs:string" minOccurs="0"/>
          <xs:element name="nodeUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="rawDataSize" type="xs:long"/>
          <xs:element name="restorableDataSize" type="xs:long"/>
          <xs:element name="vmName" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreSettingFromExistingPath">
        <xs:sequence>
          <xs:element name="arg0" type="tns:dataStoreSettingInfo" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreSettingFromExistingPathResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataStoreSettingInfo" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="resumeMerge">
        <xs:sequence>
          <xs:element name="arg0" type="tns:mergeAPISource" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="resumeMergeResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:int" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobMonitorMapByPolicyId">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobMonitorMapByPolicyIdResponse">
        <xs:sequence>
          <xs:element name="return" type="ns2:flashJobMonitor" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobMonitorsByD2DUuidAndType">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getJobMonitorsByD2DUuidAndTypeResponse">
        <xs:sequence>
          <xs:element name="return" type="ns2:flashJobMonitor" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getAllPauseMergeJobMonitors">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getAllPauseMergeJobMonitorsResponse">
        <xs:sequence>
          <xs:element name="return" type="ns2:flashJobMonitor" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="unRegisterD2DList">
        <xs:sequence>
          <xs:element name="arg0" type="tns:registerNodeInfo" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="unRegisterD2DListResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="Register4RPSApp">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
          <xs:element name="arg3" type="xs:string" minOccurs="0"/>
          <xs:element name="arg4" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="Register4RPSAppResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:int" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="cutAllRemoteConnections">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="cutAllRemoteConnectionsResponse">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="RPSCancelJob">
        <xs:sequence>
          <xs:element name="arg0" type="tns:controlJobFilter" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RPSCancelJobResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="isASBUAgentInstalled">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="isASBUAgentInstalledResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRpsNodes">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getRpsNodesResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:RPSHost" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="deleteRPSPolicies">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="deleteRPSPoliciesResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:itemOperationResult" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="itemOperationResult">
        <xs:sequence>
          <xs:element name="itemId" type="xs:string" minOccurs="0"/>
          <xs:element name="resultCode" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreHealthStatus">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getDataStoreHealthStatusResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:dataStoreHealthStatus" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="UnRegister4RPSApp">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="UnRegister4RPSAppResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:int" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RegisterAndAssignD2DListToRPS">
        <xs:sequence>
          <xs:element name="arg0" type="tns:registerNodeInfo" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RegisterAndAssignD2DListToRPSResponse">
        <xs:sequence/>
      </xs:complexType>

      <xs:complexType name="getRPSRunningJobsByType">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getRPSRunningJobsByTypeResponse">
        <xs:sequence>
          <xs:element name="return" type="tns:rpsJobInfo" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getFileFolderWithCredentials">
        <xs:sequence>
          <xs:element name="arg0" type="xs:string" minOccurs="0"/>
          <xs:element name="arg1" type="xs:string" minOccurs="0"/>
          <xs:element name="arg2" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="getFileFolderWithCredentialsResponse">
        <xs:sequence>
          <xs:element name="return" type="ns7:FileFolderItem" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:simpleType name="rpsJobStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ToRun"/>
          <xs:enumeration value="Running"/>
          <xs:enumeration value="Completed"/>
          <xs:enumeration value="Waiting"/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name="mergeAPISource">
        <xs:restriction base="xs:string">
          <xs:enumeration value="UNKNOWN"/>
          <xs:enumeration value="MANUALLY"/>
          <xs:enumeration value="ASBU_BACKUP"/>
          <xs:enumeration value="D2D_JOBS"/>
          <xs:enumeration value="DATA_STORE"/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name="vmPowerStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="unknown"/>
          <xs:enumeration value="suspended"/>
          <xs:enumeration value="power_on"/>
          <xs:enumeration value="power_off"/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name="status">
        <xs:restriction base="xs:string">
          <xs:enumeration value="NOTRUNNING"/>
          <xs:enumeration value="PAUSED"/>
          <xs:enumeration value="PAUSED_MANUALLY"/>
          <xs:enumeration value="RUNNING"/>
          <xs:enumeration value="FAILED"/>
          <xs:enumeration value="PAUSED_NO_SCHEDULE"/>
          <xs:enumeration value="TORUNN"/>
          <xs:enumeration value="PAUSING"/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name="dataStoreHealthStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="UNKNOWN"/>
          <xs:enumeration value="RED"/>
          <xs:enumeration value="YELLOW"/>
          <xs:enumeration value="GREEN"/>
        </xs:restriction>
      </xs:simpleType>
</xs:schema>
    <xs:schema version="1.0" targetNamespace="http://restore.data.webservice.arcflash.ca.com/xsd" xmlns:tns="http://restore.data.webservice.arcflash.ca.com/xsd" xmlns:ns9="http://data.webservice.arcflash.ca.com/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns8="http://backup.data.webservice.arcflash.ca.com/xsd">

      <xs:import namespace="http://backup.data.webservice.arcflash.ca.com/xsd"/>

      <xs:import namespace="http://data.webservice.arcflash.ca.com/xsd"/>

      <xs:complexType name="RecoveryPoint">
        <xs:sequence>
          <xs:element name="name" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="time" type="xs:dateTime" form="qualified" minOccurs="0"/>
          <xs:element name="backupStatus" type="xs:int" form="qualified"/>
          <xs:element name="backupType" type="xs:int" form="qualified"/>
          <xs:element name="logicalSize" type="xs:long" form="qualified"/>
          <xs:element name="dataSize" type="xs:long" form="qualified"/>
          <xs:element name="sessionID" type="xs:long" form="qualified"/>
          <xs:element name="timeZoneOffset" type="xs:int" form="qualified"/>
          <xs:element name="path" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="items" type="tns:RecoveryPointItem" form="qualified" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="encryptType" type="xs:int"/>
          <xs:element name="encryptPasswordHash" type="xs:string" minOccurs="0"/>
          <xs:element name="sessionGuid" type="xs:string" minOccurs="0"/>
          <xs:element name="sessionVersion" type="xs:long"/>
          <xs:element name="archiveJobStatus" type="xs:int"/>
          <xs:element name="fsCatalogStatus" type="xs:int"/>
          <xs:element name="backupSetFlag" type="xs:int"/>
          <xs:element name="canCatalog" type="xs:boolean"/>
          <xs:element name="canMount" type="xs:boolean"/>
          <xs:element name="backupDest" type="xs:string" minOccurs="0"/>
          <xs:element name="periodRetentionFlag" type="xs:int"/>
          <xs:element name="scheduledTime" type="xs:long"/>
          <xs:element name="isDefaultSessPwd" type="xs:boolean"/>
          <xs:element name="agentBackupType" type="xs:int"/>
          <xs:element name="agentOSType" type="xs:int"/>
          <xs:element name="vmGuestOsType" type="xs:int"/>
          <xs:element name="vmHypervisor" type="xs:int"/>
          <xs:element name="nodeUuid" type="xs:string" minOccurs="0"/>
          <xs:element name="vmName" type="xs:string" minOccurs="0"/>
          <xs:element name="vmvCenter" type="xs:string" minOccurs="0"/>
          <xs:element name="vmEsxHost" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="RecoveryPointItem">
        <xs:sequence>
          <xs:element name="volumeOrAppType" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="displayName" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="guid" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="volDataSizeB" type="xs:long" form="qualified"/>
          <xs:element name="subSessionID" type="xs:long" form="qualified"/>
          <xs:element name="catalogFilePath" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="childrenCount" type="xs:long" form="qualified"/>
          <xs:element name="volAttr" type="xs:int" form="qualified"/>
          <xs:element name="hasReplicaDB" type="xs:boolean" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="MostRecentRecoveryPoint">
        <xs:sequence>
          <xs:element name="mostRecentRecoveryPointLst" type="ns9:protectionInformation" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="earlistRecoveryPointList" type="ns9:protectionInformation" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="clientUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="clientName" type="xs:string" minOccurs="0"/>
          <xs:element name="recoveryPointCnt" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
</xs:schema>
    <xs:schema version="1.0" targetNamespace="http://activitylog.data.webservice.arcflash.ca.com/xsd" xmlns:tns="http://activitylog.data.webservice.arcflash.ca.com/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="ActivityLogResult">
        <xs:sequence>
          <xs:element name="logs" type="tns:ActivityLog" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="totalCount" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="ActivityLog">
        <xs:sequence>
          <xs:element name="message" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="time" type="xs:dateTime" form="qualified" minOccurs="0"/>
          <xs:element name="type" type="xs:int" form="qualified"/>
          <xs:element name="jobID" type="xs:long" form="qualified"/>
          <xs:element name="timeZoneOffset" type="xs:long" form="qualified"/>
          <xs:element name="d2dName" type="xs:string" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
</xs:schema>
    <xs:schema elementFormDefault="qualified" version="1.0" targetNamespace="http://data.webservice.arcflash.ca.com/xsd" xmlns:tns="http://data.webservice.arcflash.ca.com/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns12="http://webservice.arcflash.ca.com" xmlns:ns10="http://backup.data.webservice.arcflash.ca.com/xsd" xmlns:ns11="http://webservice.arcflash.arcserve.ca.com/d2dstatus/">

      <xs:import namespace="http://backup.data.webservice.arcflash.ca.com/xsd"/>

      <xs:import namespace="http://webservice.arcflash.arcserve.ca.com/d2dstatus/"/>

      <xs:import namespace="http://webservice.arcflash.ca.com"/>

      <xs:complexType name="dayTime">
        <xs:sequence>
          <xs:element name="hour" type="xs:int"/>
          <xs:element name="minute" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="advanceSchedule">
        <xs:sequence>
          <xs:element name="scheduleStartTime" type="xs:long"/>
          <xs:element name="dailyScheduleDetailItems" type="tns:dailyScheduleDetailItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="periodSchedule" type="tns:periodSchedule" minOccurs="0"/>
          <xs:element name="MaxCustomizedCount" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="dailyScheduleDetailItem">
        <xs:sequence>
          <xs:element name="dayofWeek" type="xs:int"/>
          <xs:element name="scheduleDetailItems" type="tns:scheduleDetailItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="throttleItems" type="tns:throttleItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="mergeDetailItems" type="tns:mergeDetailItem" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="scheduleDetailItem">
        <xs:sequence>
          <xs:element name="jobType" type="xs:int"/>
          <xs:element name="startTime" type="tns:dayTime" minOccurs="0"/>
          <xs:element name="endTime" type="tns:dayTime" minOccurs="0"/>
          <xs:element name="interval" type="xs:int"/>
          <xs:element name="intervalUnit" type="xs:int"/>
          <xs:element name="repeatEnabled" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="throttleItem">
        <xs:sequence>
          <xs:element name="startTime" type="tns:dayTime" minOccurs="0"/>
          <xs:element name="endTime" type="tns:dayTime" minOccurs="0"/>
          <xs:element name="throttleValue" type="xs:long"/>
          <xs:element name="unit" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="mergeDetailItem">
        <xs:sequence>
          <xs:element name="startTime" type="tns:dayTime" minOccurs="0"/>
          <xs:element name="endTime" type="tns:dayTime" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="periodSchedule">
        <xs:sequence>
          <xs:element name="daySchedule" type="tns:everyDaySchedule" minOccurs="0"/>
          <xs:element name="weekSchedule" type="tns:everyWeekSchedule" minOccurs="0"/>
          <xs:element name="monthSchedule" type="tns:everyMonthSchedule" minOccurs="0"/>
          <xs:element name="MaxWeeklyCount" type="xs:int"/>
          <xs:element name="MaxMonthlyCount" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="everyDaySchedule">
        <xs:sequence>
          <xs:element name="generateCatalog" type="xs:boolean"/>
          <xs:element name="retentionCount" type="xs:int"/>
          <xs:element name="dayTime" type="tns:dayTime" minOccurs="0"/>
          <xs:element name="bkpType" type="xs:int"/>
          <xs:element name="enabled" type="xs:boolean"/>
          <xs:element name="dayEnabled" type="xs:boolean" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="checkRecoveryPoint" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="everyWeekSchedule">
        <xs:sequence>
          <xs:element name="bkpType" type="xs:int"/>
          <xs:element name="dayOfWeek" type="xs:int"/>
          <xs:element name="enabled" type="xs:boolean"/>
          <xs:element name="dayTime" type="tns:dayTime" minOccurs="0"/>
          <xs:element name="generateCatalog" type="xs:boolean"/>
          <xs:element name="retentionCount" type="xs:int"/>
          <xs:element name="checkRecoveryPoint" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="everyMonthSchedule">
        <xs:sequence>
          <xs:element name="weekDayOfMonth" type="xs:int"/>
          <xs:element name="weekNumOfMonth" type="xs:int"/>
          <xs:element name="dayOfMonth" type="xs:int"/>
          <xs:element name="dayOfMonthEnabled" type="xs:boolean"/>
          <xs:element name="weekOfMonthEnabled" type="xs:boolean"/>
          <xs:element name="bkpType" type="xs:int"/>
          <xs:element name="enabled" type="xs:boolean"/>
          <xs:element name="dayTime" type="tns:dayTime" minOccurs="0"/>
          <xs:element name="generateCatalog" type="xs:boolean"/>
          <xs:element name="retentionCount" type="xs:int"/>
          <xs:element name="checkRecoveryPoint" type="xs:boolean"/>
          <xs:element name="endTime" type="tns:dayTime" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="connectionInfo">
        <xs:sequence>
          <xs:element name="destination" type="xs:string" minOccurs="0"/>
          <xs:element name="domain" type="xs:string" minOccurs="0"/>
          <xs:element name="pwd" type="xs:string" minOccurs="0"/>
          <xs:element name="username" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="protectionInformation">
        <xs:sequence>
          <xs:element name="backupType" type="xs:int"/>
          <xs:element name="count" type="xs:int"/>
          <xs:element name="totalLogicalSize" type="xs:long"/>
          <xs:element name="size" type="xs:long"/>
          <xs:element name="isDedupe" type="xs:boolean"/>
          <xs:element name="shedule" type="ns10:backupSchedule" minOccurs="0"/>
          <xs:element name="nextRunTime" type="xs:dateTime" minOccurs="0"/>
          <xs:element name="nextTimeZoneOffset" type="xs:long"/>
          <xs:element name="lastBackupTime" type="xs:string" minOccurs="0"/>
          <xs:element name="firstBackupTime" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="networkPath">
        <xs:sequence>
          <xs:element name="driverletter" type="xs:string" minOccurs="0"/>
          <xs:element name="remotePath" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="flashJobMonitor">
        <xs:sequence>
          <xs:element name="jobId" type="xs:long"/>
          <xs:element name="jobType" type="xs:long"/>
          <xs:element name="jobStatus" type="xs:long"/>
          <xs:element name="startTime" type="xs:long"/>
          <xs:element name="remainTime" type="xs:long"/>
          <xs:element name="elapsedTime" type="xs:long"/>
          <xs:element name="progress" type="xs:float"/>
          <xs:element name="processing" type="xs:string" minOccurs="0"/>
          <xs:element name="jobMethod" type="xs:long"/>
          <xs:element name="jobPhase" type="xs:long"/>
          <xs:element name="finished" type="xs:boolean"/>
          <xs:element name="d2dServerName" type="xs:string" minOccurs="0"/>
          <xs:element name="vmHostName" type="xs:string" minOccurs="0"/>
          <xs:element name="jobMonitorId" type="xs:string" minOccurs="0"/>
          <xs:element name="vmInstanceUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="dataStoreUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="rpsPolicyUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="d2dUuid" type="xs:string" minOccurs="0"/>
          <xs:element name="nodeId" type="xs:int"/>
          <xs:element name="runningServerId" type="xs:int"/>
          <xs:element name="agentNodeName" type="xs:string" minOccurs="0"/>
          <xs:element name="serverNodeName" type="xs:string" minOccurs="0"/>
          <xs:element name="sourceRPSId" type="xs:int"/>
          <xs:element name="targetRPSId" type="xs:int"/>
          <xs:element name="historyProductType" type="xs:int"/>
          <xs:element name="planUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="targetPlanUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="srcRPS" type="xs:string" minOccurs="0"/>
          <xs:element name="destRPS" type="xs:string" minOccurs="0"/>
          <xs:element name="srcDataStore" type="xs:string" minOccurs="0"/>
          <xs:element name="destDataStore" type="xs:string" minOccurs="0"/>
          <xs:element name="srcCommonPath" type="xs:string" minOccurs="0"/>
          <xs:element name="destCommonPath" type="xs:string" minOccurs="0"/>
          <xs:element name="targetRpsUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="isRunningOnRPS" type="xs:boolean"/>
          <xs:element name="isLinuxNode" type="xs:boolean"/>
          <xs:element name="isOnDemand" type="xs:boolean"/>
          <xs:element name="jobUUID" type="xs:string" minOccurs="0"/>
          <xs:element name="jobSubStatus" type="xs:long"/>
          <xs:element name="rpsServerName" type="xs:string" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="jobMonitor">
        <xs:complexContent>
          <xs:extension base="tns:flashJobMonitor">
            <xs:sequence>
              <xs:element name="sessionID" type="xs:long"/>
              <xs:element name="ulBeginSessID" type="xs:long"/>
              <xs:element name="ulEndSessID" type="xs:long"/>
              <xs:element name="flags" type="xs:long"/>
              <xs:element name="volMethod" type="xs:long"/>
              <xs:element name="estimateBytesJob" type="xs:long"/>
              <xs:element name="transferBytesJob" type="xs:long"/>
              <xs:element name="estimateBytesDisk" type="xs:long"/>
              <xs:element name="transferBytesDisk" type="xs:long"/>
              <xs:element name="currentProcessDiskName" type="xs:string" minOccurs="0"/>
              <xs:element name="nProgramCPU" type="xs:long"/>
              <xs:element name="nSystemCPU" type="xs:long"/>
              <xs:element name="nReadSpeed" type="xs:long"/>
              <xs:element name="nLogicSpeed" type="xs:long"/>
              <xs:element name="nWriteSpeed" type="xs:long"/>
              <xs:element name="nSystemReadSpeed" type="xs:long"/>
              <xs:element name="nSystemWriteSpeed" type="xs:long"/>
              <xs:element name="throttling" type="xs:long"/>
              <xs:element name="encInfoStatus" type="xs:long"/>
              <xs:element name="totalSizeRead" type="xs:long"/>
              <xs:element name="totalSizeWritten" type="xs:long"/>
              <xs:element name="curVolMntPoint" type="xs:string" minOccurs="0"/>
              <xs:element name="compressLevel" type="xs:long"/>
              <xs:element name="transferMode" type="xs:long"/>
              <xs:element name="ctDWBKJobID" type="xs:long"/>
              <xs:element name="ctBKStartTime" type="xs:string" minOccurs="0"/>
              <xs:element name="ctBKJobName" type="xs:string" minOccurs="0"/>
              <xs:element name="ctCurCatVol" type="xs:string" minOccurs="0"/>
              <xs:element name="dwBKSessNum" type="xs:long"/>
              <xs:element name="wzBKBackupDest" type="xs:string" minOccurs="0"/>
              <xs:element name="wzBKDestUsrName" type="xs:string" minOccurs="0"/>
              <xs:element name="wzBKDestPassword" type="xs:string" minOccurs="0"/>
              <xs:element name="wszEDB" type="xs:string" minOccurs="0"/>
              <xs:element name="wszMailFolder" type="xs:string" minOccurs="0"/>
              <xs:element name="ulTotalFolder" type="xs:long"/>
              <xs:element name="ulProcessedFolder" type="xs:long"/>
              <xs:element name="ulTotalMergedSessions" type="xs:long"/>
              <xs:element name="ulMergedSession" type="xs:long"/>
              <xs:element name="productType" type="xs:long"/>
              <xs:element name="d2DStatusInfo" type="ns11:D2DStatusInfo" minOccurs="0"/>
              <xs:element name="totalDiskCount" type="xs:long"/>
              <xs:element name="currentDiskIndex" type="xs:long"/>
              <xs:element name="rpsPolicyName" type="xs:string" minOccurs="0"/>
              <xs:element name="enableDedupe" type="xs:boolean"/>
              <xs:element name="uniqueData" type="xs:long"/>
              <xs:element name="ulReplicationSavedBandWidth" type="xs:long"/>
              <xs:element name="totalNodesNeedPurge" type="xs:long"/>
              <xs:element name="purgedNodes" type="xs:long"/>
              <xs:element name="purgingNodeName" type="xs:string" minOccurs="0"/>
              <xs:element name="totalSessionsOfPurgingNode" type="xs:long"/>
              <xs:element name="purgedSessionsOfPurgingNode" type="xs:long"/>
              <xs:element name="ulTotalVMJobCount" type="xs:long"/>
              <xs:element name="ulFinishedVMJobCount" type="xs:long"/>
              <xs:element name="ulCanceledVMJobCount" type="xs:long"/>
              <xs:element name="ulFailedVMJobCount" type="xs:long"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>

      <xs:complexType name="convertJobMonitor">
        <xs:complexContent>
          <xs:extension base="tns:flashJobMonitor">
            <xs:sequence>
              <xs:element name="jobMonitor" type="ns12:repJobMonitor" minOccurs="0"/>
              <xs:element name="rpsPolicyUUID" type="xs:string" minOccurs="0"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
</xs:schema>
    <xs:schema version="1.0" targetNamespace="http://browse.data.webservice.arcflash.ca.com/xsd" xmlns:tns="http://browse.data.webservice.arcflash.ca.com/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="Volume">
        <xs:sequence>
          <xs:element name="displayName" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="name" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="size" type="xs:long" form="qualified"/>
          <xs:element name="freeSize" type="xs:long" form="qualified"/>
          <xs:element name="pageFile" type="xs:boolean" form="qualified"/>
          <xs:element name="guid" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="diskCount" type="xs:int" form="qualified"/>
          <xs:element name="type" type="xs:int" form="qualified"/>
          <xs:element name="layOut" type="xs:int" form="qualified"/>
          <xs:element name="fsType" type="xs:int" form="qualified"/>
          <xs:element name="status" type="xs:int" form="qualified"/>
          <xs:element name="subStatus" type="xs:int" form="qualified"/>
          <xs:element name="isShow" type="xs:int" form="qualified"/>
          <xs:element name="msgID" type="xs:int" form="qualified"/>
          <xs:element name="disks" type="tns:Disk" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="isDeduped" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="isEmpty" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="datastore" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="canBackup" type="xs:boolean" form="qualified"/>
          <xs:element name="volumeLabel" type="xs:string" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="Disk">
        <xs:sequence>
          <xs:element name="signature" type="xs:long" form="qualified"/>
          <xs:element name="number" type="xs:int" form="qualified"/>
          <xs:element name="extentStartPos" type="xs:long" form="qualified"/>
          <xs:element name="extentLength" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="FileFolderItem">
        <xs:sequence>
          <xs:element name="files" type="tns:File" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="folders" type="tns:Folder" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="File">
        <xs:sequence>
          <xs:element name="name" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="size" type="xs:long" form="qualified"/>
          <xs:element name="path" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="lastUpdateDate" type="xs:dateTime" form="qualified" minOccurs="0"/>
          <xs:element name="creationDate" type="xs:dateTime" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name="Folder">
        <xs:sequence>
          <xs:element name="name" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="path" type="xs:string" form="qualified" minOccurs="0"/>
          <xs:element name="lastUpdateDate" type="xs:dateTime" form="qualified" minOccurs="0"/>
          <xs:element name="creationDate" type="xs:dateTime" form="qualified" minOccurs="0"/>
        </xs:sequence>
      </xs:complexType>
</xs:schema>
    <xs:schema version="1.0" targetNamespace="http://history.job.data.webservice.arcflash.ca.com/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:import namespace="http://webservice.arcflash.ca.com"/>

      <xs:complexType name="FlashJobHistoryResult">
        <xs:sequence>
          <xs:element name="jobHistory" type="tns:flashJobHistory" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="totalCount" type="xs:long" form="qualified"/>
        </xs:sequence>
      </xs:complexType>
</xs:schema>
  </types>
  <message name="getDataSizesFromStorage">
    <part name="parameters" element="tns:getDataSizesFromStorage"/>
  </message>
  <message name="getDataSizesFromStorageResponse">
    <part name="parameters" element="tns:getDataSizesFromStorageResponse"/>
  </message>
  <message name="updateAdminAccount">
    <part name="parameters" element="tns:updateAdminAccount"/>
  </message>
  <message name="updateAdminAccountResponse">
    <part name="parameters" element="tns:updateAdminAccountResponse"/>
  </message>
  <message name="createFolder">
    <part name="parameters" element="tns:createFolder"/>
  </message>
  <message name="createFolderResponse">
    <part name="parameters" element="tns:createFolderResponse"/>
  </message>
  <message name="getRpsNodes">
    <part name="parameters" element="tns:getRpsNodes"/>
  </message>
  <message name="getRpsNodesResponse">
    <part name="parameters" element="tns:getRpsNodesResponse"/>
  </message>
  <message name="getServerTime">
    <part name="parameters" element="tns:getServerTime"/>
  </message>
  <message name="getServerTimeResponse">
    <part name="parameters" element="tns:getServerTimeResponse"/>
  </message>
  <message name="getJobMonitorMapByPolicyId">
    <part name="parameters" element="tns:getJobMonitorMapByPolicyId"/>
  </message>
  <message name="getJobMonitorMapByPolicyIdResponse">
    <part name="parameters" element="tns:getJobMonitorMapByPolicyIdResponse"/>
  </message>
  <message name="getJobMonitorLog">
    <part name="parameters" element="tns:getJobMonitorLog"/>
  </message>
  <message name="getJobMonitorLogResponse">
    <part name="parameters" element="tns:getJobMonitorLogResponse"/>
  </message>
  <message name="createFolderWithDetails">
    <part name="parameters" element="tns:createFolderWithDetails"/>
  </message>
  <message name="createFolderWithDetailsResponse">
    <part name="parameters" element="tns:createFolderWithDetailsResponse"/>
  </message>
  <message name="getJobMonitorsByType">
    <part name="parameters" element="tns:getJobMonitorsByType"/>
  </message>
  <message name="getJobMonitorsByTypeResponse">
    <part name="parameters" element="tns:getJobMonitorsByTypeResponse"/>
  </message>
  <message name="registerD2DList">
    <part name="parameters" element="tns:registerD2DList"/>
  </message>
  <message name="registerD2DListResponse">
    <part name="parameters" element="tns:registerD2DListResponse"/>
  </message>
  <message name="unRegisterD2DList">
    <part name="parameters" element="tns:unRegisterD2DList"/>
  </message>
  <message name="unRegisterD2DListResponse">
    <part name="parameters" element="tns:unRegisterD2DListResponse"/>
  </message>
  <message name="submitSeedingJob">
    <part name="parameters" element="tns:submitSeedingJob"/>
  </message>
  <message name="submitSeedingJobResponse">
    <part name="parameters" element="tns:submitSeedingJobResponse"/>
  </message>
  <message name="checkIsSeedingRunning">
    <part name="parameters" element="tns:checkIsSeedingRunning"/>
  </message>
  <message name="checkIsSeedingRunningResponse">
    <part name="parameters" element="tns:checkIsSeedingRunningResponse"/>
  </message>
  <message name="getRecoveryPointsWithNodeInfo">
    <part name="parameters" element="tns:getRecoveryPointsWithNodeInfo"/>
  </message>
  <message name="getRecoveryPointsWithNodeInfoResponse">
    <part name="parameters" element="tns:getRecoveryPointsWithNodeInfoResponse"/>
  </message>
  <message name="validateSessPasswordByHash">
    <part name="parameters" element="tns:validateSessPasswordByHash"/>
  </message>
  <message name="validateSessPasswordByHashResponse">
    <part name="parameters" element="tns:validateSessPasswordByHashResponse"/>
  </message>
  <message name="deleteNodesFromDataStore">
    <part name="parameters" element="tns:deleteNodesFromDataStore"/>
  </message>
  <message name="deleteNodesFromDataStoreResponse">
    <part name="parameters" element="tns:deleteNodesFromDataStoreResponse"/>
  </message>
  <message name="isPathInDataStore">
    <part name="parameters" element="tns:isPathInDataStore"/>
  </message>
  <message name="isPathInDataStoreResponse">
    <part name="parameters" element="tns:isPathInDataStoreResponse"/>
  </message>
  <message name="getVolumeSize4DataStore">
    <part name="parameters" element="tns:getVolumeSize4DataStore"/>
  </message>
  <message name="getVolumeSize4DataStoreResponse">
    <part name="parameters" element="tns:getVolumeSize4DataStoreResponse"/>
  </message>
  <message name="isASBUAgentInstalled">
    <part name="parameters" element="tns:isASBUAgentInstalled"/>
  </message>
  <message name="isASBUAgentInstalledResponse">
    <part name="parameters" element="tns:isASBUAgentInstalledResponse"/>
  </message>
  <message name="getAllPauseMergeJobMonitors">
    <part name="parameters" element="tns:getAllPauseMergeJobMonitors"/>
  </message>
  <message name="getAllPauseMergeJobMonitorsResponse">
    <part name="parameters" element="tns:getAllPauseMergeJobMonitorsResponse"/>
  </message>
  <message name="startReplicationNow">
    <part name="parameters" element="tns:startReplicationNow"/>
  </message>
  <message name="startReplicationNowResponse">
    <part name="parameters" element="tns:startReplicationNowResponse"/>
  </message>
  <message name="getFileFolderWithCredentials">
    <part name="parameters" element="tns:getFileFolderWithCredentials"/>
  </message>
  <message name="getFileFolderWithCredentialsResponse">
    <part name="parameters" element="tns:getFileFolderWithCredentialsResponse"/>
  </message>
  <message name="getVolumes">
    <part name="parameters" element="tns:getVolumes"/>
  </message>
  <message name="getVolumesResponse">
    <part name="parameters" element="tns:getVolumesResponse"/>
  </message>
  <message name="getVolumesWithDetails">
    <part name="parameters" element="tns:getVolumesWithDetails"/>
  </message>
  <message name="getVolumesWithDetailsResponse">
    <part name="parameters" element="tns:getVolumesWithDetailsResponse"/>
  </message>
  <message name="cutAllRemoteConnections">
    <part name="parameters" element="tns:cutAllRemoteConnections"/>
  </message>
  <message name="cutAllRemoteConnectionsResponse">
    <part name="parameters" element="tns:cutAllRemoteConnectionsResponse"/>
  </message>
  <message name="getRecoveryPoints">
    <part name="parameters" element="tns:getRecoveryPoints"/>
  </message>
  <message name="getRecoveryPointsResponse">
    <part name="parameters" element="tns:getRecoveryPointsResponse"/>
  </message>
  <message name="getMostRecentRecoveryPoints">
    <part name="parameters" element="tns:getMostRecentRecoveryPoints"/>
  </message>
  <message name="getMostRecentRecoveryPointsResponse">
    <part name="parameters" element="tns:getMostRecentRecoveryPointsResponse"/>
  </message>
  <message name="getRPSSummary">
    <part name="parameters" element="tns:getRPSSummary"/>
  </message>
  <message name="getRPSSummaryResponse">
    <part name="parameters" element="tns:getRPSSummaryResponse"/>
  </message>
  <message name="getDefaultJobHistoryFilter">
    <part name="parameters" element="tns:getDefaultJobHistoryFilter"/>
  </message>
  <message name="getDefaultJobHistoryFilterResponse">
    <part name="parameters" element="tns:getDefaultJobHistoryFilterResponse"/>
  </message>
  <message name="getDataStoreStatus">
    <part name="parameters" element="tns:getDataStoreStatus"/>
  </message>
  <message name="getDataStoreStatusResponse">
    <part name="parameters" element="tns:getDataStoreStatusResponse"/>
  </message>
  <message name="validateUser">
    <part name="parameters" element="tns:validateUser"/>
  </message>
  <message name="validateUserResponse">
    <part name="parameters" element="tns:validateUserResponse"/>
  </message>
  <message name="pauseMerge">
    <part name="parameters" element="tns:pauseMerge"/>
  </message>
  <message name="pauseMergeResponse">
    <part name="parameters" element="tns:pauseMergeResponse"/>
  </message>
  <message name="resumeMerge">
    <part name="parameters" element="tns:resumeMerge"/>
  </message>
  <message name="resumeMergeResponse">
    <part name="parameters" element="tns:resumeMergeResponse"/>
  </message>
  <message name="getJobHistory">
    <part name="parameters" element="tns:getJobHistory"/>
  </message>
  <message name="getJobHistoryResponse">
    <part name="parameters" element="tns:getJobHistoryResponse"/>
  </message>
  <message name="validateDest">
    <part name="parameters" element="tns:validateDest"/>
  </message>
  <message name="validateDestResponse">
    <part name="parameters" element="tns:validateDestResponse"/>
  </message>
  <message name="login">
    <part name="parameters" element="tns:login"/>
  </message>
  <message name="loginResponse">
    <part name="parameters" element="tns:loginResponse"/>
  </message>
  <message name="getDataStoreInstance">
    <part name="parameters" element="tns:getDataStoreInstance"/>
  </message>
  <message name="getDataStoreInstanceResponse">
    <part name="parameters" element="tns:getDataStoreInstanceResponse"/>
  </message>
  <message name="getRegistedClientByDatastore">
    <part name="parameters" element="tns:getRegistedClientByDatastore"/>
  </message>
  <message name="getRegistedClientByDatastoreResponse">
    <part name="parameters" element="tns:getRegistedClientByDatastoreResponse"/>
  </message>
  <message name="establishTrust">
    <part name="parameters" element="tns:establishTrust"/>
  </message>
  <message name="establishTrustResponse">
    <part name="parameters" element="tns:establishTrustResponse"/>
  </message>
  <message name="getDataStoreHealthStatus">
    <part name="parameters" element="tns:getDataStoreHealthStatus"/>
  </message>
  <message name="getDataStoreHealthStatusResponse">
    <part name="parameters" element="tns:getDataStoreHealthStatusResponse"/>
  </message>
  <message name="getRegistedClientList">
    <part name="parameters" element="tns:getRegistedClientList"/>
  </message>
  <message name="getRegistedClientListResponse">
    <part name="parameters" element="tns:getRegistedClientListResponse"/>
  </message>
  <message name="getRPSRunningJobs">
    <part name="parameters" element="tns:getRPSRunningJobs"/>
  </message>
  <message name="getRPSRunningJobsResponse">
    <part name="parameters" element="tns:getRPSRunningJobsResponse"/>
  </message>
  <message name="getRPSWaitingJobs">
    <part name="parameters" element="tns:getRPSWaitingJobs"/>
  </message>
  <message name="getRPSWaitingJobsResponse">
    <part name="parameters" element="tns:getRPSWaitingJobsResponse"/>
  </message>
  <message name="getRPSRunningJobsByType">
    <part name="parameters" element="tns:getRPSRunningJobsByType"/>
  </message>
  <message name="getRPSRunningJobsByTypeResponse">
    <part name="parameters" element="tns:getRPSRunningJobsByTypeResponse"/>
  </message>
  <message name="getRPSWaitingJobsByType">
    <part name="parameters" element="tns:getRPSWaitingJobsByType"/>
  </message>
  <message name="getRPSWaitingJobsByTypeResponse">
    <part name="parameters" element="tns:getRPSWaitingJobsByTypeResponse"/>
  </message>
  <message name="getClientRunningJobs">
    <part name="parameters" element="tns:getClientRunningJobs"/>
  </message>
  <message name="getClientRunningJobsResponse">
    <part name="parameters" element="tns:getClientRunningJobsResponse"/>
  </message>
  <message name="getClientWaitingJobs">
    <part name="parameters" element="tns:getClientWaitingJobs"/>
  </message>
  <message name="getClientWaitingJobsResponse">
    <part name="parameters" element="tns:getClientWaitingJobsResponse"/>
  </message>
  <message name="getRPSServerID">
    <part name="parameters" element="tns:getRPSServerID"/>
  </message>
  <message name="getRPSServerIDResponse">
    <part name="parameters" element="tns:getRPSServerIDResponse"/>
  </message>
  <message name="submitFSOndemandCatalogJob">
    <part name="parameters" element="tns:submitFSOndemandCatalogJob"/>
  </message>
  <message name="submitFSOndemandCatalogJobResponse">
    <part name="parameters" element="tns:submitFSOndemandCatalogJobResponse"/>
  </message>
  <message name="DataStoreUpdateDSPathStatus">
    <part name="parameters" element="tns:DataStoreUpdateDSPathStatus"/>
  </message>
  <message name="DataStoreUpdateDSPathStatusResponse">
    <part name="parameters" element="tns:DataStoreUpdateDSPathStatusResponse"/>
  </message>
  <message name="RegisterAndAssignD2DListToRPS">
    <part name="parameters" element="tns:RegisterAndAssignD2DListToRPS"/>
  </message>
  <message name="RegisterAndAssignD2DListToRPSResponse">
    <part name="parameters" element="tns:RegisterAndAssignD2DListToRPSResponse"/>
  </message>
  <message name="getVersionInfo">
    <part name="parameters" element="tns:getVersionInfo"/>
  </message>
  <message name="getVersionInfoResponse">
    <part name="parameters" element="tns:getVersionInfoResponse"/>
  </message>
  <message name="cancelJob">
    <part name="parameters" element="tns:cancelJob"/>
  </message>
  <message name="cancelJobResponse">
    <part name="parameters" element="tns:cancelJobResponse"/>
  </message>
  <message name="validateUserByUUID">
    <part name="parameters" element="tns:validateUserByUUID"/>
  </message>
  <message name="validateUserByUUIDResponse">
    <part name="parameters" element="tns:validateUserByUUIDResponse"/>
  </message>
  <message name="queryCatalogStatus">
    <part name="parameters" element="tns:queryCatalogStatus"/>
  </message>
  <message name="queryCatalogStatusResponse">
    <part name="parameters" element="tns:queryCatalogStatusResponse"/>
  </message>
  <message name="getActivityLogs">
    <part name="parameters" element="tns:getActivityLogs"/>
  </message>
  <message name="getActivityLogsResponse">
    <part name="parameters" element="tns:getActivityLogsResponse"/>
  </message>
  <message name="getJobActivityLogs">
    <part name="parameters" element="tns:getJobActivityLogs"/>
  </message>
  <message name="getJobActivityLogsResponse">
    <part name="parameters" element="tns:getJobActivityLogsResponse"/>
  </message>
  <message name="getMappedNetworkPath">
    <part name="parameters" element="tns:getMappedNetworkPath"/>
  </message>
  <message name="getMappedNetworkPathResponse">
    <part name="parameters" element="tns:getMappedNetworkPathResponse"/>
  </message>
  <message name="RPSCancelJob">
    <part name="parameters" element="tns:RPSCancelJob"/>
  </message>
  <message name="RPSCancelJobResponse">
    <part name="parameters" element="tns:RPSCancelJobResponse"/>
  </message>
  <message name="RPSResumeJob">
    <part name="parameters" element="tns:RPSResumeJob"/>
  </message>
  <message name="RPSResumeJobResponse">
    <part name="parameters" element="tns:RPSResumeJobResponse"/>
  </message>
  <message name="getRPSJobs">
    <part name="parameters" element="tns:getRPSJobs"/>
  </message>
  <message name="getRPSJobsResponse">
    <part name="parameters" element="tns:getRPSJobsResponse"/>
  </message>
  <message name="getDataStoreInfo4Lightintegration">
    <part name="parameters" element="tns:getDataStoreInfo4Lightintegration"/>
  </message>
  <message name="getDataStoreInfo4LightintegrationResponse">
    <part name="parameters" element="tns:getDataStoreInfo4LightintegrationResponse"/>
  </message>
  <message name="getJobMonitorsByD2DUuidAndType">
    <part name="parameters" element="tns:getJobMonitorsByD2DUuidAndType"/>
  </message>
  <message name="getJobMonitorsByD2DUuidAndTypeResponse">
    <part name="parameters" element="tns:getJobMonitorsByD2DUuidAndTypeResponse"/>
  </message>
  <message name="register4Console">
    <part name="parameters" element="tns:register4Console"/>
  </message>
  <message name="register4ConsoleResponse">
    <part name="parameters" element="tns:register4ConsoleResponse"/>
  </message>
  <message name="Register4RPSApp">
    <part name="parameters" element="tns:Register4RPSApp"/>
  </message>
  <message name="Register4RPSAppResponse">
    <part name="parameters" element="tns:Register4RPSAppResponse"/>
  </message>
  <message name="getEdgeRpsRegInfo">
    <part name="parameters" element="tns:getEdgeRpsRegInfo"/>
  </message>
  <message name="getEdgeRpsRegInfoResponse">
    <part name="parameters" element="tns:getEdgeRpsRegInfoResponse"/>
  </message>
  <message name="UnRegister4RPSApp">
    <part name="parameters" element="tns:UnRegister4RPSApp"/>
  </message>
  <message name="UnRegister4RPSAppResponse">
    <part name="parameters" element="tns:UnRegister4RPSAppResponse"/>
  </message>
  <message name="DataStoreGetDedupeRequiredMinMemSizeByte">
    <part name="parameters" element="tns:DataStoreGetDedupeRequiredMinMemSizeByte"/>
  </message>
  <message name="DataStoreGetDedupeRequiredMinMemSizeByteResponse">
    <part name="parameters" element="tns:DataStoreGetDedupeRequiredMinMemSizeByteResponse"/>
  </message>
  <message name="getDataStoreSettingFromExistingPath">
    <part name="parameters" element="tns:getDataStoreSettingFromExistingPath"/>
  </message>
  <message name="getDataStoreSettingFromExistingPathResponse">
    <part name="parameters" element="tns:getDataStoreSettingFromExistingPathResponse"/>
  </message>
  <message name="getHashRoleEnvInfo">
    <part name="parameters" element="tns:getHashRoleEnvInfo"/>
  </message>
  <message name="getHashRoleEnvInfoResponse">
    <part name="parameters" element="tns:getHashRoleEnvInfoResponse"/>
  </message>
  <message name="modifyDataStoreInstance">
    <part name="parameters" element="tns:modifyDataStoreInstance"/>
  </message>
  <message name="modifyDataStoreInstanceResponse">
    <part name="parameters" element="tns:modifyDataStoreInstanceResponse"/>
  </message>
  <message name="getDataStoreInfoFromDisk">
    <part name="parameters" element="tns:getDataStoreInfoFromDisk"/>
  </message>
  <message name="getDataStoreInfoFromDiskResponse">
    <part name="parameters" element="tns:getDataStoreInfoFromDiskResponse"/>
  </message>
  <message name="importDataStoreInstance">
    <part name="parameters" element="tns:importDataStoreInstance"/>
  </message>
  <message name="importDataStoreInstanceResponse">
    <part name="parameters" element="tns:importDataStoreInstanceResponse"/>
  </message>
  <message name="addDataStoreInstance">
    <part name="parameters" element="tns:addDataStoreInstance"/>
  </message>
  <message name="addDataStoreInstanceResponse">
    <part name="parameters" element="tns:addDataStoreInstanceResponse"/>
  </message>
  <message name="validateStoreUpperLimit">
    <part name="parameters" element="tns:validateStoreUpperLimit"/>
  </message>
  <message name="validateStoreUpperLimitResponse">
    <part name="parameters" element="tns:validateStoreUpperLimitResponse"/>
  </message>
  <message name="startDataStoreInstance">
    <part name="parameters" element="tns:startDataStoreInstance"/>
  </message>
  <message name="startDataStoreInstanceResponse">
    <part name="parameters" element="tns:startDataStoreInstanceResponse"/>
  </message>
  <message name="stopDataStoreInstance">
    <part name="parameters" element="tns:stopDataStoreInstance"/>
  </message>
  <message name="stopDataStoreInstanceResponse">
    <part name="parameters" element="tns:stopDataStoreInstanceResponse"/>
  </message>
  <message name="removeDataStoreInstance">
    <part name="parameters" element="tns:removeDataStoreInstance"/>
  </message>
  <message name="removeDataStoreInstanceResponse">
    <part name="parameters" element="tns:removeDataStoreInstanceResponse"/>
  </message>
  <message name="getDataStoreFreeMemory">
    <part name="parameters" element="tns:getDataStoreFreeMemory"/>
  </message>
  <message name="getDataStoreFreeMemoryResponse">
    <part name="parameters" element="tns:getDataStoreFreeMemoryResponse"/>
  </message>
  <message name="deleteRPSPolicies">
    <part name="parameters" element="tns:deleteRPSPolicies"/>
  </message>
  <message name="deleteRPSPoliciesResponse">
    <part name="parameters" element="tns:deleteRPSPoliciesResponse"/>
  </message>
  <message name="saveRPSPolicy">
    <part name="parameters" element="tns:saveRPSPolicy"/>
  </message>
  <message name="saveRPSPolicyResponse">
    <part name="parameters" element="tns:saveRPSPolicyResponse"/>
  </message>
  <message name="getRPSPolicySummaries">
    <part name="parameters" element="tns:getRPSPolicySummaries"/>
  </message>
  <message name="getRPSPolicySummariesResponse">
    <part name="parameters" element="tns:getRPSPolicySummariesResponse"/>
  </message>
  <portType name="IRPSService4CPM">
    <operation name="getDataSizesFromStorage">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataSizesFromStorageRequest" message="tns:getDataSizesFromStorage"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataSizesFromStorageResponse" message="tns:getDataSizesFromStorageResponse"/>
    </operation>
    <operation name="updateAdminAccount">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/updateAdminAccountRequest" message="tns:updateAdminAccount"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/updateAdminAccountResponse" message="tns:updateAdminAccountResponse"/>
    </operation>
    <operation name="createFolder">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/createFolderRequest" message="tns:createFolder"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/createFolderResponse" message="tns:createFolderResponse"/>
    </operation>
    <operation name="getRpsNodes">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRpsNodesRequest" message="tns:getRpsNodes"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRpsNodesResponse" message="tns:getRpsNodesResponse"/>
    </operation>
    <operation name="getServerTime">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getServerTimeRequest" message="tns:getServerTime"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getServerTimeResponse" message="tns:getServerTimeResponse"/>
    </operation>
    <operation name="getJobMonitorMapByPolicyId">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobMonitorMapByPolicyIdRequest" message="tns:getJobMonitorMapByPolicyId"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobMonitorMapByPolicyIdResponse" message="tns:getJobMonitorMapByPolicyIdResponse"/>
    </operation>
    <operation name="getJobMonitorLog">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobMonitorLogRequest" message="tns:getJobMonitorLog"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobMonitorLogResponse" message="tns:getJobMonitorLogResponse"/>
    </operation>
    <operation name="createFolderWithDetails">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/createFolderWithDetailsRequest" message="tns:createFolderWithDetails"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/createFolderWithDetailsResponse" message="tns:createFolderWithDetailsResponse"/>
    </operation>
    <operation name="getJobMonitorsByType">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobMonitorsByTypeRequest" message="tns:getJobMonitorsByType"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobMonitorsByTypeResponse" message="tns:getJobMonitorsByTypeResponse"/>
    </operation>
    <operation name="registerD2DList">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/registerD2DListRequest" message="tns:registerD2DList"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/registerD2DListResponse" message="tns:registerD2DListResponse"/>
    </operation>
    <operation name="unRegisterD2DList">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/unRegisterD2DListRequest" message="tns:unRegisterD2DList"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/unRegisterD2DListResponse" message="tns:unRegisterD2DListResponse"/>
    </operation>
    <operation name="submitSeedingJob">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/submitSeedingJobRequest" message="tns:submitSeedingJob"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/submitSeedingJobResponse" message="tns:submitSeedingJobResponse"/>
    </operation>
    <operation name="checkIsSeedingRunning">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/checkIsSeedingRunningRequest" message="tns:checkIsSeedingRunning"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/checkIsSeedingRunningResponse" message="tns:checkIsSeedingRunningResponse"/>
    </operation>
    <operation name="getRecoveryPointsWithNodeInfo">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRecoveryPointsWithNodeInfoRequest" message="tns:getRecoveryPointsWithNodeInfo"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRecoveryPointsWithNodeInfoResponse" message="tns:getRecoveryPointsWithNodeInfoResponse"/>
    </operation>
    <operation name="validateSessPasswordByHash">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateSessPasswordByHashRequest" message="tns:validateSessPasswordByHash"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateSessPasswordByHashResponse" message="tns:validateSessPasswordByHashResponse"/>
    </operation>
    <operation name="deleteNodesFromDataStore">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/deleteNodesFromDataStoreRequest" message="tns:deleteNodesFromDataStore"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/deleteNodesFromDataStoreResponse" message="tns:deleteNodesFromDataStoreResponse"/>
    </operation>
    <operation name="isPathInDataStore">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/isPathInDataStoreRequest" message="tns:isPathInDataStore"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/isPathInDataStoreResponse" message="tns:isPathInDataStoreResponse"/>
    </operation>
    <operation name="getVolumeSize4DataStore">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getVolumeSize4DataStoreRequest" message="tns:getVolumeSize4DataStore"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getVolumeSize4DataStoreResponse" message="tns:getVolumeSize4DataStoreResponse"/>
    </operation>
    <operation name="isASBUAgentInstalled">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/isASBUAgentInstalledRequest" message="tns:isASBUAgentInstalled"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/isASBUAgentInstalledResponse" message="tns:isASBUAgentInstalledResponse"/>
    </operation>
    <operation name="getAllPauseMergeJobMonitors">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getAllPauseMergeJobMonitorsRequest" message="tns:getAllPauseMergeJobMonitors"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getAllPauseMergeJobMonitorsResponse" message="tns:getAllPauseMergeJobMonitorsResponse"/>
    </operation>
    <operation name="startReplicationNow">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/startReplicationNowRequest" message="tns:startReplicationNow"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/startReplicationNowResponse" message="tns:startReplicationNowResponse"/>
    </operation>
    <operation name="getFileFolderWithCredentials">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getFileFolderWithCredentialsRequest" message="tns:getFileFolderWithCredentials"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getFileFolderWithCredentialsResponse" message="tns:getFileFolderWithCredentialsResponse"/>
    </operation>
    <operation name="getVolumes">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getVolumesRequest" message="tns:getVolumes"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getVolumesResponse" message="tns:getVolumesResponse"/>
    </operation>
    <operation name="getVolumesWithDetails">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getVolumesWithDetailsRequest" message="tns:getVolumesWithDetails"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getVolumesWithDetailsResponse" message="tns:getVolumesWithDetailsResponse"/>
    </operation>
    <operation name="cutAllRemoteConnections">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/cutAllRemoteConnectionsRequest" message="tns:cutAllRemoteConnections"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/cutAllRemoteConnectionsResponse" message="tns:cutAllRemoteConnectionsResponse"/>
    </operation>
    <operation name="getRecoveryPoints">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRecoveryPointsRequest" message="tns:getRecoveryPoints"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRecoveryPointsResponse" message="tns:getRecoveryPointsResponse"/>
    </operation>
    <operation name="getMostRecentRecoveryPoints">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getMostRecentRecoveryPointsRequest" message="tns:getMostRecentRecoveryPoints"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getMostRecentRecoveryPointsResponse" message="tns:getMostRecentRecoveryPointsResponse"/>
    </operation>
    <operation name="getRPSSummary">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSSummaryRequest" message="tns:getRPSSummary"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSSummaryResponse" message="tns:getRPSSummaryResponse"/>
    </operation>
    <operation name="getDefaultJobHistoryFilter">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDefaultJobHistoryFilterRequest" message="tns:getDefaultJobHistoryFilter"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDefaultJobHistoryFilterResponse" message="tns:getDefaultJobHistoryFilterResponse"/>
    </operation>
    <operation name="getDataStoreStatus">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreStatusRequest" message="tns:getDataStoreStatus"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreStatusResponse" message="tns:getDataStoreStatusResponse"/>
    </operation>
    <operation name="validateUser">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateUserRequest" message="tns:validateUser"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateUserResponse" message="tns:validateUserResponse"/>
    </operation>
    <operation name="pauseMerge">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/pauseMergeRequest" message="tns:pauseMerge"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/pauseMergeResponse" message="tns:pauseMergeResponse"/>
    </operation>
    <operation name="resumeMerge">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/resumeMergeRequest" message="tns:resumeMerge"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/resumeMergeResponse" message="tns:resumeMergeResponse"/>
    </operation>
    <operation name="getJobHistory">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobHistoryRequest" message="tns:getJobHistory"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobHistoryResponse" message="tns:getJobHistoryResponse"/>
    </operation>
    <operation name="validateDest">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateDestRequest" message="tns:validateDest"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateDestResponse" message="tns:validateDestResponse"/>
    </operation>
    <operation name="login">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/loginRequest" message="tns:login"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/loginResponse" message="tns:loginResponse"/>
    </operation>
    <operation name="getDataStoreInstance">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreInstanceRequest" message="tns:getDataStoreInstance"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreInstanceResponse" message="tns:getDataStoreInstanceResponse"/>
    </operation>
    <operation name="getRegistedClientByDatastore">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRegistedClientByDatastoreRequest" message="tns:getRegistedClientByDatastore"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRegistedClientByDatastoreResponse" message="tns:getRegistedClientByDatastoreResponse"/>
    </operation>
    <operation name="establishTrust">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/establishTrustRequest" message="tns:establishTrust"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/establishTrustResponse" message="tns:establishTrustResponse"/>
    </operation>
    <operation name="getDataStoreHealthStatus">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreHealthStatusRequest" message="tns:getDataStoreHealthStatus"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreHealthStatusResponse" message="tns:getDataStoreHealthStatusResponse"/>
    </operation>
    <operation name="getRegistedClientList">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRegistedClientListRequest" message="tns:getRegistedClientList"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRegistedClientListResponse" message="tns:getRegistedClientListResponse"/>
    </operation>
    <operation name="getRPSRunningJobs">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSRunningJobsRequest" message="tns:getRPSRunningJobs"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSRunningJobsResponse" message="tns:getRPSRunningJobsResponse"/>
    </operation>
    <operation name="getRPSWaitingJobs">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSWaitingJobsRequest" message="tns:getRPSWaitingJobs"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSWaitingJobsResponse" message="tns:getRPSWaitingJobsResponse"/>
    </operation>
    <operation name="getRPSRunningJobsByType">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSRunningJobsByTypeRequest" message="tns:getRPSRunningJobsByType"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSRunningJobsByTypeResponse" message="tns:getRPSRunningJobsByTypeResponse"/>
    </operation>
    <operation name="getRPSWaitingJobsByType">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSWaitingJobsByTypeRequest" message="tns:getRPSWaitingJobsByType"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSWaitingJobsByTypeResponse" message="tns:getRPSWaitingJobsByTypeResponse"/>
    </operation>
    <operation name="getClientRunningJobs">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getClientRunningJobsRequest" message="tns:getClientRunningJobs"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getClientRunningJobsResponse" message="tns:getClientRunningJobsResponse"/>
    </operation>
    <operation name="getClientWaitingJobs">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getClientWaitingJobsRequest" message="tns:getClientWaitingJobs"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getClientWaitingJobsResponse" message="tns:getClientWaitingJobsResponse"/>
    </operation>
    <operation name="getRPSServerID">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSServerIDRequest" message="tns:getRPSServerID"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSServerIDResponse" message="tns:getRPSServerIDResponse"/>
    </operation>
    <operation name="submitFSOndemandCatalogJob">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/submitFSOndemandCatalogJobRequest" message="tns:submitFSOndemandCatalogJob"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/submitFSOndemandCatalogJobResponse" message="tns:submitFSOndemandCatalogJobResponse"/>
    </operation>
    <operation name="DataStoreUpdateDSPathStatus">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/DataStoreUpdateDSPathStatusRequest" message="tns:DataStoreUpdateDSPathStatus"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/DataStoreUpdateDSPathStatusResponse" message="tns:DataStoreUpdateDSPathStatusResponse"/>
    </operation>
    <operation name="RegisterAndAssignD2DListToRPS">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/RegisterAndAssignD2DListToRPSRequest" message="tns:RegisterAndAssignD2DListToRPS"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/RegisterAndAssignD2DListToRPSResponse" message="tns:RegisterAndAssignD2DListToRPSResponse"/>
    </operation>
    <operation name="getVersionInfo">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getVersionInfoRequest" message="tns:getVersionInfo"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getVersionInfoResponse" message="tns:getVersionInfoResponse"/>
    </operation>
    <operation name="cancelJob">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/cancelJobRequest" message="tns:cancelJob"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/cancelJobResponse" message="tns:cancelJobResponse"/>
    </operation>
    <operation name="validateUserByUUID">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateUserByUUIDRequest" message="tns:validateUserByUUID"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateUserByUUIDResponse" message="tns:validateUserByUUIDResponse"/>
    </operation>
    <operation name="queryCatalogStatus">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/queryCatalogStatusRequest" message="tns:queryCatalogStatus"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/queryCatalogStatusResponse" message="tns:queryCatalogStatusResponse"/>
    </operation>
    <operation name="getActivityLogs">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getActivityLogsRequest" message="tns:getActivityLogs"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getActivityLogsResponse" message="tns:getActivityLogsResponse"/>
    </operation>
    <operation name="getJobActivityLogs">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobActivityLogsRequest" message="tns:getJobActivityLogs"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobActivityLogsResponse" message="tns:getJobActivityLogsResponse"/>
    </operation>
    <operation name="getMappedNetworkPath">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getMappedNetworkPathRequest" message="tns:getMappedNetworkPath"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getMappedNetworkPathResponse" message="tns:getMappedNetworkPathResponse"/>
    </operation>
    <operation name="RPSCancelJob">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/RPSCancelJobRequest" message="tns:RPSCancelJob"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/RPSCancelJobResponse" message="tns:RPSCancelJobResponse"/>
    </operation>
    <operation name="RPSResumeJob">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/RPSResumeJobRequest" message="tns:RPSResumeJob"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/RPSResumeJobResponse" message="tns:RPSResumeJobResponse"/>
    </operation>
    <operation name="getRPSJobs">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSJobsRequest" message="tns:getRPSJobs"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSJobsResponse" message="tns:getRPSJobsResponse"/>
    </operation>
    <operation name="getDataStoreInfo4Lightintegration">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreInfo4LightintegrationRequest" message="tns:getDataStoreInfo4Lightintegration"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreInfo4LightintegrationResponse" message="tns:getDataStoreInfo4LightintegrationResponse"/>
    </operation>
    <operation name="getJobMonitorsByD2DUuidAndType">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobMonitorsByD2DUuidAndTypeRequest" message="tns:getJobMonitorsByD2DUuidAndType"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getJobMonitorsByD2DUuidAndTypeResponse" message="tns:getJobMonitorsByD2DUuidAndTypeResponse"/>
    </operation>
    <operation name="register4Console">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/register4ConsoleRequest" message="tns:register4Console"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/register4ConsoleResponse" message="tns:register4ConsoleResponse"/>
    </operation>
    <operation name="Register4RPSApp">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/Register4RPSAppRequest" message="tns:Register4RPSApp"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/Register4RPSAppResponse" message="tns:Register4RPSAppResponse"/>
    </operation>
    <operation name="getEdgeRpsRegInfo">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getEdgeRpsRegInfoRequest" message="tns:getEdgeRpsRegInfo"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getEdgeRpsRegInfoResponse" message="tns:getEdgeRpsRegInfoResponse"/>
    </operation>
    <operation name="UnRegister4RPSApp">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/UnRegister4RPSAppRequest" message="tns:UnRegister4RPSApp"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/UnRegister4RPSAppResponse" message="tns:UnRegister4RPSAppResponse"/>
    </operation>
    <operation name="DataStoreGetDedupeRequiredMinMemSizeByte">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/DataStoreGetDedupeRequiredMinMemSizeByteRequest" message="tns:DataStoreGetDedupeRequiredMinMemSizeByte"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/DataStoreGetDedupeRequiredMinMemSizeByteResponse" message="tns:DataStoreGetDedupeRequiredMinMemSizeByteResponse"/>
    </operation>
    <operation name="getDataStoreSettingFromExistingPath">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreSettingFromExistingPathRequest" message="tns:getDataStoreSettingFromExistingPath"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreSettingFromExistingPathResponse" message="tns:getDataStoreSettingFromExistingPathResponse"/>
    </operation>
    <operation name="getHashRoleEnvInfo">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getHashRoleEnvInfoRequest" message="tns:getHashRoleEnvInfo"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getHashRoleEnvInfoResponse" message="tns:getHashRoleEnvInfoResponse"/>
    </operation>
    <operation name="modifyDataStoreInstance">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/modifyDataStoreInstanceRequest" message="tns:modifyDataStoreInstance"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/modifyDataStoreInstanceResponse" message="tns:modifyDataStoreInstanceResponse"/>
    </operation>
    <operation name="getDataStoreInfoFromDisk">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreInfoFromDiskRequest" message="tns:getDataStoreInfoFromDisk"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreInfoFromDiskResponse" message="tns:getDataStoreInfoFromDiskResponse"/>
    </operation>
    <operation name="importDataStoreInstance">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/importDataStoreInstanceRequest" message="tns:importDataStoreInstance"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/importDataStoreInstanceResponse" message="tns:importDataStoreInstanceResponse"/>
    </operation>
    <operation name="addDataStoreInstance">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/addDataStoreInstanceRequest" message="tns:addDataStoreInstance"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/addDataStoreInstanceResponse" message="tns:addDataStoreInstanceResponse"/>
    </operation>
    <operation name="validateStoreUpperLimit">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateStoreUpperLimitRequest" message="tns:validateStoreUpperLimit"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/validateStoreUpperLimitResponse" message="tns:validateStoreUpperLimitResponse"/>
    </operation>
    <operation name="startDataStoreInstance">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/startDataStoreInstanceRequest" message="tns:startDataStoreInstance"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/startDataStoreInstanceResponse" message="tns:startDataStoreInstanceResponse"/>
    </operation>
    <operation name="stopDataStoreInstance">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/stopDataStoreInstanceRequest" message="tns:stopDataStoreInstance"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/stopDataStoreInstanceResponse" message="tns:stopDataStoreInstanceResponse"/>
    </operation>
    <operation name="removeDataStoreInstance">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/removeDataStoreInstanceRequest" message="tns:removeDataStoreInstance"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/removeDataStoreInstanceResponse" message="tns:removeDataStoreInstanceResponse"/>
    </operation>
    <operation name="getDataStoreFreeMemory">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreFreeMemoryRequest" message="tns:getDataStoreFreeMemory"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getDataStoreFreeMemoryResponse" message="tns:getDataStoreFreeMemoryResponse"/>
    </operation>
    <operation name="deleteRPSPolicies">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/deleteRPSPoliciesRequest" message="tns:deleteRPSPolicies"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/deleteRPSPoliciesResponse" message="tns:deleteRPSPoliciesResponse"/>
    </operation>
    <operation name="saveRPSPolicy">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/saveRPSPolicyRequest" message="tns:saveRPSPolicy"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/saveRPSPolicyResponse" message="tns:saveRPSPolicyResponse"/>
    </operation>
    <operation name="getRPSPolicySummaries">
      <input wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSPolicySummariesRequest" message="tns:getRPSPolicySummaries"/>
      <output wsam:Action="http://webservice.arcflash.ca.com/IRPSService4CPM/getRPSPolicySummariesResponse" message="tns:getRPSPolicySummariesResponse"/>
    </operation>
  </portType>
  <binding name="RPSService4CPMImplHttpSoap11EndpointBinding" type="tns:IRPSService4CPM">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
    <operation name="getDataSizesFromStorage">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="updateAdminAccount">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="createFolder">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRpsNodes">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getServerTime">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getJobMonitorMapByPolicyId">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getJobMonitorLog">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="createFolderWithDetails">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getJobMonitorsByType">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="registerD2DList">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="unRegisterD2DList">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="submitSeedingJob">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="checkIsSeedingRunning">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRecoveryPointsWithNodeInfo">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="validateSessPasswordByHash">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="deleteNodesFromDataStore">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="isPathInDataStore">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getVolumeSize4DataStore">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="isASBUAgentInstalled">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getAllPauseMergeJobMonitors">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="startReplicationNow">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getFileFolderWithCredentials">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getVolumes">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getVolumesWithDetails">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="cutAllRemoteConnections">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRecoveryPoints">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getMostRecentRecoveryPoints">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRPSSummary">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDefaultJobHistoryFilter">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDataStoreStatus">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="validateUser">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="pauseMerge">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="resumeMerge">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getJobHistory">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="validateDest">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="login">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDataStoreInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRegistedClientByDatastore">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="establishTrust">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDataStoreHealthStatus">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRegistedClientList">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRPSRunningJobs">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRPSWaitingJobs">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRPSRunningJobsByType">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRPSWaitingJobsByType">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getClientRunningJobs">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getClientWaitingJobs">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRPSServerID">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="submitFSOndemandCatalogJob">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="DataStoreUpdateDSPathStatus">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="RegisterAndAssignD2DListToRPS">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getVersionInfo">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="cancelJob">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="validateUserByUUID">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="queryCatalogStatus">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getActivityLogs">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getJobActivityLogs">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getMappedNetworkPath">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="RPSCancelJob">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="RPSResumeJob">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRPSJobs">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDataStoreInfo4Lightintegration">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getJobMonitorsByD2DUuidAndType">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="register4Console">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="Register4RPSApp">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getEdgeRpsRegInfo">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="UnRegister4RPSApp">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="DataStoreGetDedupeRequiredMinMemSizeByte">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDataStoreSettingFromExistingPath">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getHashRoleEnvInfo">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="modifyDataStoreInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDataStoreInfoFromDisk">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="importDataStoreInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="addDataStoreInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="validateStoreUpperLimit">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="startDataStoreInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="stopDataStoreInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="removeDataStoreInstance">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDataStoreFreeMemory">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="deleteRPSPolicies">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="saveRPSPolicy">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getRPSPolicySummaries">
      <soap:operation soapAction=""/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
  </binding>
  <service name="RPSService4CPMImpl">
    <port name="RPSService4CPMImplHttpSoap11Endpoint" binding="tns:RPSService4CPMImplHttpSoap11EndpointBinding">
      <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
    </port>
  </service>
</definitions>

